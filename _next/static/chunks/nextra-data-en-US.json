{"/itg-mobile-framework/2024/Go_live":{"title":"Under construction","data":{}},"/itg-mobile-framework/component_development/style_your_components":{"title":"Estilos globales en la plantilla","data":{"":"Los estilos globales en nuestra plantilla son esenciales para garantizar la coherencia visual en todos los componentes nativos. Estos estilos se definen y aplican para facilitar la personalización y mejorar la eficiencia al realizar cambios que afectan diferentes partes de la aplicación.","ajuste-de-valores-y-pautas-de-diseño#Ajuste de valores y pautas de diseño":"Es crucial ajustar los valores de los estilos globales para cumplir con las pautas de diseño de la aplicación en desarrollo. Por ejemplo, si queremos cambiar el color de fondo base de nuestra aplicación, simplemente modificamos el valor correspondiente dentro del objeto backgroundColor en el archivo de estilos global.\nimport type { GlobalStylesType } from './typeTest'\nconst GlobalStyles: GlobalStylesType = {\n   // Background Colors\n  backgroundColor: {\n    base: '#ffffff',  // Background Colors\n    baseInverted: '#03044e',\n     // Other colors...\n  },","consideraciones-adicionales#Consideraciones adicionales":"Es importante tener en cuenta que los cambios en los estilos globales afectarán a todos los componentes nativos que los utilicen, a menos que se anulen con estilos personalizados. Por lo tanto, comprender cómo se aplican y ajustan estos estilos es esencial para mantener la coherencia visual en toda la aplicación.","ejemplos-de-uso-de-estilos-globales-en-estilos-personalizados#Ejemplos de uso de estilos globales en estilos personalizados":"text: {\n   color: '#000', ...GlobalStyles.typography.heading1;\n}\nSe proporciona una forma de modificar estilos de componentes específicos a través de un hook.Esta implementación no solo agrega flexibilidad al proceso de desarrollo sino que también promueve la reutilización de componentes al permitir que se personalicen según las necesidades específicas de cada proyecto.","organización-y-estructura-de-estilos#Organización y estructura de estilos.":"Para mantener la claridad y organización de estilos en los proyectos, se adopta una estructura específica. Los estilos se crearán en archivos individuales para cada pantalla o vista de la aplicación, como \"home\" o \"auth\". Estos archivos estarán ubicados dentro de la carpeta \"styles\" y tendrán la extensión \".ts\".Cada clase de estilo se nombrará siguiendo una convención simple: el nombre de la vista seguido del nombre del estilo, separados por un guión. Por ejemplo, para los estilos de la vista \"home\", podríamos tener una clase llamada \"home-title\".Los estilos para cada vista se organizarán dentro de un archivo \".ts\", utilizando un objeto para agruparlos. Dentro de este objeto, las claves de nivel superior representarán las clases de estilo para esa vista y cada clase, a su vez, será un objeto que contiene los estilos aplicables a las etiquetas del componente.Para mantener la coherencia, el nombre de la constante que contiene los estilos de una vista será el nombre de la vista seguido de \"Styles\". Por ejemplo, para la vista \"home\", la constante se llamará \"homeStyles\".A continuación se muestra un ejemplo de cómo se estructuran los estilos para la vista \"home\":\nconst homeStyles: Styles = {\n  'home-text-1': { // Class name\n    container: { // Class of the tag to which styles will be applied\n      backgroundColor: 'pink', // CSS Property / Value\n    },\n    text: {\n      color: 'black',\n      fontSize: 20,\n      textAlign: 'center',\n    },\n  },\n  'home-text-2': {\n    container: {\n      backgroundColor: 'black',\n    },\n    text: {\n      color: 'white',\n      fontSize: 20,\n      padding: 5,\n    },\n  },\n}","uso-de-estilos-use-el-hook-customstyles#Uso de estilos (use el hook CustomStyles)":"Para aplicar estilos a un componente, utilizamos el hook useCustomStyles. Este hook toma como argumento el nombre de la clase de estilo que queremos aplicar, la cual debe ser proporcionada vía props.El hook devuelve un objeto StyleSheet que contiene los estilos definidos para esa clase en particular.Usando el ejemplo anterior, supongamos que queremos aplicar los estilos definidos para la clase \"home-text-1\". Podemos hacerlo de la siguiente manera:\nconst styles = useCustomStyles('home-text-1');\nEsto nos proporcionará el objeto que contiene los estilos definidos para la clase \"home-text-1\":\n{\n  container: {\n    backgroundColor: 'pink',\n  },\n  text: {\n    color: 'black',\n    fontSize: 20,\n    textAlign: 'center',\n  }, \n}\nFinalmente, podemos aplicar fácilmente estos estilos a las etiquetas dentro del componente:\n<View style={styles.container}>\n  <Text style={styles.text}>Example</Text>\n</View>","estilos-específicos-para-androidios#Estilos específicos para Android/iOS":"En React Native, los estilos pueden variar según el sistema operativo en el que se ejecuta la aplicación. Para abordar esta variación, proporcionamos una solución flexible para aplicar estilos específicos para Android o iOS a una clase particular.Para lograr esto, en nuestros estilos definimos el nombre de la clase de etiqueta seguido de un punto (.) y el nombre del sistema operativo. Por ejemplo: 'container.ios'.\n{\n  container: {\n    backgroundColor: 'pink',\n    padding: 20\n  },\n  'container.ios': {\n    padding: 15\n  },\n}\nEn este ejemplo, si la aplicación se ejecuta en un dispositivo Android, solo se aplicarán los estilos definidos en 'contenedor'. Sin embargo, si se ejecuta en un dispositivo iOS, se aplicarán los estilos definidos tanto en 'container' como en 'container.ios', pero la última clase tendrá prioridad. Esto significa que si hay una clase repetida, se priorizarán los estilos específicos de la plataforma correspondiente (iOS o Android)."}},"/itg-mobile-framework/component_development/intro_to_component_development":{"title":"Desarrollo de componentes","data":{"":"Los componentes son uno de los conceptos escenciales en el desarrollo con React. Son la base con la que se construyen aplicaciones y por este motivo, son el mejor lugar para empezar tu recorrido en este proceso.Aprenderás\nQué componentes y flujos ya están cubiertos con Ecommerce-plugin\nArquitectura para creación de componentes\nPersonalización de componentes\n¿Cómo renderizar mi componente?","componentes-y-flujos-de-itg-ecommerce-plugin#Componentes y flujos de itg-ecommerce-plugin":"itg-ecommerce-plugin es una librería de componentes contextos y funciones, orientada a aplicaciones e-commerce.Su alcance cubre un producto minimo viable de una tienda. Dentro de este alcance encontrarás flujos como autenticación y registro, flujo de compra que incluye visualizacion de productos, añadir a carrito y pago. Administración de información del usuario como medios de pago o direcciones.Para ver a más detalle todos los flujos, componentes y componentes ya existentes puedes revisar la sección de componentes.","arquitectura-para-creación-de-componentes#Arquitectura para creación de componentes":"Existe una gran libertad en cuanto a cómo crear y manejar componentes. Para estandarizar el proceso de creación de componentes, proponemos el uso de la siguiente arquitecturaEsta arquitectura está compuesta por 3 capas","contenedor-del-componente#Contenedor del componente":"Este es el punto central para el funcionamiento del componente. Recibe todas las propiedades necesarias para el funcionamiento correcto del componente, estas propiedades serán pasadas al hook del componente o a su renderizado.Cuando un componente se requiera en otro archivo, se deberá usar el Contenedor como constructor de dicho componente.","hook-del-componente#Hook del componente":"Esta capa contiene toda la funcionalidad del componente. Aquí se encuentran todos los estados, efectos y declaraciones de funciones. Todos estos valores son pasados, en caso de ser necesario, a la capa visual del componente.","renderizado-del-componentre#Renderizado del componentre":"La capa de renderizado o vista del componente se encarga de manejar el JSX de la aplicación, pintando los componentes de forma adecuada con la información que ha recibido tanto del contenedor como del hook del componente.","implementación-de-un-componente-botón#Implementación de un componente botón":"Con el siguiente ejemplo, puedes visualizar esta arquitectura en código\nimport React from 'react'\nimport { Button } from './Button'\nimport { useButton } from './useButtonText'\nconst ButtonContainer = ({ text }) => {\n  const ButtonProps = useButton()\n  return <ButtonText {...ButtonProps} text={text} />\n}\nexport default ButtonContainer\nAquí, la función que ejecutaría Button deberá ser pasada por useButton. Mientras que el texto al interior del botón será pasado desde las props del contenedor.Aprenderás todos los detalles de implementación de componentes en cómo crear un componente.","personalización-de-componentes#Personalización de componentes":"La apariencia visual y la experiencia de usuario son fundamentales al momento de desarrollar la UI de tu aplicación. Para facilitar este proceso podrás gestionar los estilos desde dos enfoques:","estilos-globales#Estilos globales":"Los estilos globales te permiten centralizar un conjunto de estilos que se usarán en toda tu aplicación. Este enfoque te permite mantener una consistencia, además de facilitar el mantenimiento de estilos en un solo lugar.","estilos-personalizados#Estilos personalizados":"Si deseas cambiar los estilos predeterminados de tus componentes o de los componentes de la librería e-commerce, los estilos personalizados son la herramienta perfecta. Puedes crear tus propias hojas de estilos y modificar las propiedades de estilos según tu preferencia y necesidades de tu proyecto.Por ejemplo, si la hoja de estilos personalizada que creaste tiene las clase buttonClass y en ella defines las propiedades buttonContainer y buttonText puedes llamarlos desde tu JSX de de la siguiente manera\nimport React from 'react'\nimport { TouchableOpacity, Text } from 'react-native'\nimport { useCustomStyles } from '...some-route'\nconst Button = ({ text, onPress }) => {\n  const customStyles = useCustomStyles('buttonClass')\n  return (\n    <TouchableOpacity style={customStyles.buttonContainer} onPress={onPress}>\n      <Text style={customStyles.buttonText}>{text}</Text>\n    </TouchableOpacity>\n  )\n}","cómo-renderizar-mi-componente#¿Cómo renderizar mi componente?":"Para que puedas visualizar el componente que has creado deberás completar 2 pasos. El primero de ellos es registrar tu componente para que CORE pueda recibirlo. Encontrarás más detalles en registro de componentes, pero para entenderlo de forma rápida, el componente CORE puede recibir un listado de componentes custom, el pasar esos componentes a CORE es lo que llamamos proceso de registro.Cómo habrás leido en Qué es CORE, uno de sus caracterisitcas principales es su inclinación a trabajar con sistemas de gestión de contenido. Así que una vez tu componente ha sido registrado, deberás añadirlo desde el CMS que estés usando y posicionarlo en una o más rutas, de acuerdo a tus necesidades.","recapitulación#Recapitulación":"Acabas de tener un primer vistado al proceso de creación y renderizado de componentes. Recapitulemos algunos puntos clave\nReact te ofrece gran libertad al crear tus componentes, te recomendamos usar una arquitectura de contenedor, capa lógica y capa de presentación.\nPuedes personalizar tus componentes con una plantilla para toda tu app o crear estilos especificos para ciertos componentes.\nLa estructura de tu aplicación está determinada por el CMS que estés usando, para renderizar los componentes que desees añadelos a las rutas desde el CMS.","proximos-pasos#Proximos pasos":"Continua con Creación de un componente para fortalecer tu entendimiento de la nueva arquitectura de componentes, tendrás la oportunidad de trabajar con ejemplos practicos usando estados y contextos."}},"/itg-mobile-framework/component_development/your_first_component":{"title":"Creación de un componente","data":{"":"Los componentes del core están basados en una arquitectura de 3 capas: capa contenedora, capa logica y capa de presentación. Esta arquitectura permite modularizar de forma sencilla tus componentes, mejorando su legibilidad, aumentando su flexibilidad y sentando las bases de un código fácil de testear.Aprenderás\nCuál es la estructura de carpetas para crear componentes\nCómo crear un componente desde 0\nCómo implementar hooks como useEffect o useContext dentro de tus componentes","estructura-de-carpetas-y-componentes#Estructura de carpetas y componentes":"El proyecto en el que estarás trabajando tiene una carpeta components dentro del directorio src. En esta carpeta crearás todos tus componentes con la siguiente estructuraCada nuevo componente tendrá su propia carpeta, en la cual 3 archivos prinicpales para el componente, index.tsx, Component.tsx y useComponent.tsx.Como verás, además de los 3 archivos del componente, existen carpetas para algunas utilidades relacionadas al componente, como sus tipado, documentación y tests.","componentes-relacionados#Componentes relacionados":"Puedes encontrarte en la necesidad de agrupar componentes que sean pequeñas partes de una misma funcionalidad. Si ese es el caso puedes crear una carpeta general en la cual almacenar todos esos componentes, en su interior crear una carpeta components y usar la estructura que apicamos arriba.","componentes-con-subcomponentes#Componentes con subcomponentes":"Si tienes un componente individual que necesita de subcomponentes, puedes combinar las 2 estrategias vistas arriba. Crea la carpeta de tu componente con sus archivos base y las carpetas de utilidades y adiciona una carpeta de components y repite la misma estructura.","tu-primer-componente#Tu primer componente":"Ya que conoces la arquitectura de componentes y su estructura de carpetas, crearás el siguiente slider de imagenes","botones#Botones":"Para empezar, en src/components crea una carpeta llamada Button. En su interior crea 3 archivos index.tsx, Button.tsx y useButton.tsx.En index.tsx crearás tu componente contenedor. Para nombrar a tu componente contenedor, usar el nombre que hayas definido para tu componente, más el sufijo Container. En este caso el contenedor será ButtonContainer.En ButtonContainer estará contenida tu capa lógica y tu capa de presentación.\nimport React from 'react'\nimport { Button } from './Button'\nimport { useButton } from './useButton'\ninterface ButtonContainerProps {\n  label: string;\n  handlePress: () => void;\n}\nconst ButtonContainer = (props: ButtonContainerProps) => {\n  //const ButtonProps = useButton() // capa lógica\n  return <ButtonText {...props} /> //capa de presentación\n}\nexport default ButtonContainer\n¿Por qué la capa lógica está comentada?Para este ejercicio, tu componente button será reutilizable, de modo que la logica a ejecutar no estará definida en el componente sino que será pasada por props.\nAunque algunos de tus componentes no requieran capa logica, procura mantener la arquitectura de componentes. Te ayudará a tener tu código organizado.\nLa capa de presentación de tu componente tendrá esta estructura\nimport { StyleSheet, Text, TouchableOpacity } from 'react-native'\ninterface ButtonProps {\n  label: string;\n  handlePress: () => void;\n}\nconst Button = ({ label, handlePress }: ButtonProps): JSX.Element => {\n  const defaultStyles = StyleSheet.create({\n    //...estilos\n  })\n  return (\n    <TouchableOpacity\n      style={defaultStyles.buttonContainer}\n      onPress={handlePress}\n    >\n      <Text style={defaultStyles.buttonLabel}>{label}</Text>\n    </TouchableOpacity>\n  )\n}\nexport default Button\nSi deseas ver los estilos del ejemplo, presiona en ver más del ejemplo.\nCuando importes tu componente ButtonContainer podría verse algo así","slider#Slider":"Crea una nueva carpeta para un componente Slider dentro de src/components. Recrea la arquitectura de archivos para tu nuevo componente, de modo que tengas la siguiente estructura\nA continuación tienes el espacio para que puedas desarrollar tu mismo la logica y renderizado del slider. En este playground toda la estructura de funciones y paso de propiedades está listo para que puedas crear el código, y ver en tiempo real su funcionamiento.DesafíoEn la capa lógica:\nDesarrolla el código de los controladores goToNext y goToPrevious\nEn la capa de presentación:\nAsigna los controladores goToNext y goToPrevious a los botones que creaste anteriormente.\nAñade un componente imagen, y haz que la imagen renderizada cambie en respuesta a la interacción con los botones.\nCrea estilos y personaliza el Slider a tu preferencia.\nAunque en este ejercicio encontrarás que cada parte de la arquitectura de componentes está en el mismo archivo, en tu proyecto simplemente escribirás cada sección en su archivo correspondiente. [Aquí puedes ver el código del ejercicio]\n(https://snack.expo.dev/@jhonperezitg101/slider-component).","qué-hacer-en-la-capa-lógica#¿Qué hacer en la capa lógica?":"Al realizar el ejercicio anterior o revisar su solución podrás ver que aquellos componentes que requieren de uso de hooks de react, como useState en realidad se escriben de forma similar a otros componentes con los que has trabajado en otros proyectos, su principal diferencia es su organización, pues todos ellos se encuentran ahora en la capa lógica de tu componente.Algunas operaciones comunes que podrás realizar en la capa lógica de tu componente son:\nUsar hooks de react (useState, useEffect)\nCrear los controladores que usará tu capa de presentación.\nRealizar peticiones de información\nSubscripción a contextos","recomendaciones-para-tus-hooks#Recomendaciones para tus hooks":"Aunque la capa lógica puede tener los estados y efectos de tu componente, quizá no siempre necesites un estado o un efecto. Algunas recomendaciones de react para determinar si necesitas o no un estado es responder estas preguntas. Haz este ejercicio con el componente slider que creaste:\n¿Se mantiene sin cambios con el tiempo? Si es así, no es estado.\nEl listado de imagenes se mantiene sin cambios durante el ciclo de vida del componente. Por lo que no necesitas un estado para almancenarlas.\nLa imagen actual del slider cambiará en respuesta a la interacción del usuario, por lo que necesitarás un estado para almacenar el indice de la imagen actual.\n¿Se pasa desde un padre por props? Si es así, no es estado.\nEl listado de imagenes se pasa como props a la capa contenedora, por lo que no es necesario crear un estado para ellas.\n¿Puedes calcularlo basado en estado existente on en props en tu componente? Si es así, ¡definitivamente no es estado!\nSi a tu slider agregas unos dots de navegación, no es necesario almacenar en un estado el número de dots a crear pues puedes calcularlo a partir del largo del arreglo de imagenes pasadas a tu componente.\nPuedes profundizar en estos conceptos en Pensar en React, y si deseas aprender si tu componente necesita o no un efecto (useEffect) puedes revisar You Might Not Need an Effect.","recapitulación#Recapitulación":"Acabas de crear tu primer componente, recapitulemos algunos puntos clave\nLos componentes se desarrollan con una arquitectura de contenedor, capa lógica y capa de presentación.\nAlgunos componentes, pueden no necesitar capa lógica pero procura mantener la su estructura de carpetas y archivos.\nTu capa lógica será el lugar para almacenar tu estado, controlar efectos, crear controladores de eventos y realizar peticiones."}},"/itg-mobile-framework/components/Autocomplete/ProductSuggestions":{"title":"ProductSuggestions","data":{"":"El componente ProductSuggestions muestra productos sugeridos en función del término ingresado en la barra de búsqueda, y se actualiza en tiempo real a medida que el usuario escribe.","configuración#Configuración":"El componente ProductSuggestions exporta las siguientes propiedades","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-\t\nEste componente recibe propiedades que se transmiten a su(s) componente(s) hijo(s). Para ver todas las opciones de personalización, consulta la documentación de dichos componentes:\nProductSummary","especificaciones#Especificaciones":"El comportamiento del componente ProductSuggestions depende directamente de la barra de búsqueda. Al seleccionar un producto, el usuario es redirigido al detalle del mismo.","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductSuggestions, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductSuggestionsContainer\tproductSuggestionsTitle\tproductSuggestionsProductSummaryContainer\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nProductSummary"}},"/itg-mobile-framework/components/Autocomplete/SearchSuggestions":{"title":"SearchSuggestions","data":{"":"El componente SearchSuggestions muestra términos sugeridos basados en lo que el usuario ingresa en la barra de búsqueda, actualizándose en tiempo real conforme se escribe.","configuración#Configuración":"El componente SearchSuggestions puede configurarse con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","especificaciones#Especificaciones":"El comportamiento del componente SearchSuggestions está vinculado a la barra de búsqueda. A medida que el usuario ingresa un término, las sugerencias se actualizan en tiempo real. Al seleccionar una sugerencia, el usuario es redirigido a la pantalla de resultados de búsqueda.","personalización#Personalización":"Para aplicar personalización de estilos al componente SearchSuggestions, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tsearchSuggestionsContainer\tsearchSuggestionsTitleText\tsearchSuggestionsText"}},"/itg-mobile-framework/components/Autocomplete/TopSearches":{"title":"TopSearches","data":{"":"El componente TopSearches muestra los términos de búsqueda más populares.","configuración#Configuración":"El componente TopSearches puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto que se muestra como título\t-\tsearchIcon\tstring\tIcono que se renderiza junto al término\tsearch\ticonColor\tstring\tColor para los íconos (fill)\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","especificaciones#Especificaciones":"El comportamiento del componente TopSearches depende directamente de la barra de búsqueda. Al ingresar un término de búsqueda, los términos más buscados se ocultan para dar prioridad a los componentes de autocompletado. Al seleccionar un término de TopSearches, se redirige al usuario a la pantalla de búsqueda.","personalización#Personalización":"Para aplicar personalización de estilos al componente TopSearches, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\ttopSearchesContainer\ttopSearchesTitleText\ttopSearchesText\ttopSearchesSearchIcon\ttopSearchesItemContainer"}},"/itg-mobile-framework/components/Checkout":{"title":"CHECKOUT","data":{"":"The Checkout component is a WebView component that displays a checkout page specified by the provided URI.","configuration#Configuration":"The Checkout component exports the following props:","checkout-props#Checkout props":"Prop name\tType\tDescription\tDefault value\turi\tstring\tThe URL of the checkout page to render","modus-operandi#Modus Operandi":"To use the Checkout component, simply provide the uri prop with the URL of the checkout page to render. The uri should be formatted like this:\n\"https://www.example.com/checkout/?orderFormId=${orderFormId}\"\nParameters should be enclosed within ${}. In the application, these values will be replaced with those obtained from the local order form. Currently, orderFormId and email can be passed as parameters, but additional parameters required by the checkout URL can be added in the future.","customization#Customization":"For styling customizations in the Checkout component, you would typically rely on the styles provided by the webpage loaded within the WebView. As the Checkout component renders a webpage, any styling adjustments would be made directly within the webpage itself, rather than through the component's props or CSS handles."}},"/itg-mobile-framework/components/Header/GoBack":{"title":"GoBack","data":{"":"El componente GoBack es un botón que muestra un ícono y texto. Al hacer clic, navega al usuario de vuelta a la pantalla anterior en la pila de navegación, proporcionando una navegación intuitiva hacia atrás.","configuración#Configuración":"El componente GoBack puede ser configurado con las siguientes propiedades y extiende las NativeStackHeaderProps de @react-navigation/native-stack:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ticonsColor\tstring\tColor de los íconos de los subcomponentes.\tundefined\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\tundefined\tgoBackText\tstring\tTexto que se muestra junto al ícono.\tundefined\tgoBackIcon\tstring\tÍcono que se renderiza para el botón de regreso.\tgoBack","personalización#Personalización":"Para aplicar personalización de estilos al componente GoBack, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de estilos\tgoBackContainer\tgoBackIcon\tgoBackText","modus-operandi#Modus Operandi":"El comportamiento del componente GoBack se basa en la navegación de regreso a la pantalla anterior en la pila de navegación. Cuando se hace clic en el botón, el usuario es llevado a la pantalla anterior, proporcionando una experiencia de usuario fluida y predecible."}},"/itg-mobile-framework/components/AddToCartButton":{"title":"AddToCartButton","data":{"":"El componente AddToCartButton permite a los usuarios agregar productos al carrito de compras.","configuración#Configuración":"El componente AddToCartButton exporta las siguientes propiedades:","propiedades-de-addtocartbutton#Propiedades de AddToCartButton":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tonPressFn\tfunction\tFunción que se ejecuta al hacer clic en el botón\t-\tavailability\tboolean\tEstado que determina si el botón está habilitado o no\t-\ttextAddToCart\tstring\tTexto del botón cuando el producto está disponible\t\"Agregar\"\ttextAvailability\tstring\tTexto del botón cuando el producto no está disponible\t\"No disponible\"\tbuttonActiveOpacity\tnumber\tNivel de opacidad del botón cuando se presiona\t-\tdefaultStyles\tobject\tEstilos por defecto para el botón\t-\tisLoading\tboolean\tIndica si se debe mostrar un estado de carga en el botón\tfalse\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","especificaciones#Especificaciones":"El funcionamiento del componente AddToCartButton se ajusta según las propiedades proporcionadas:\nEstado habilitado/deshabilitado: Cuando el producto está disponible (availability: true), el botón muestra el texto definido en textAddToCart y permite a los usuarios agregar el producto al carrito. Si el producto no está disponible (availability: false), el botón muestra el texto definido en textAvailability y está deshabilitado para evitar la acción de agregar al carrito.\nEstado de carga: Si la propiedad isLoading es true, el botón mostrará un indicador de carga, indicando que la acción de agregar al carrito está en progreso.\nAclaración: Actualmente este componente está destinado únicamente para uso interno en el desarrollo de componentes del framework y no está exportado como un componente independiente.","personalización#Personalización":"Para aplicar personalización de estilos al componente AddToCartButton, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductButtonContainer\tproductButtonContainerDisabled\tproductButtonText\tproductButtonTextDisabled"}},"/itg-mobile-framework/components/Header/DeliveryInfo":{"title":"DeliveryInfo","data":{"":"El componente DeliveryInfo está diseñado para mostrar la dirección de entrega seleccionada y el método para un pedido. Al hacer clic, redirige a la pantalla de gestión donde los usuarios pueden registrar una nueva dirección o seleccionar una de sus opciones previamente guardadas.","configuración#Configuración":"El componente DeliveryInfo puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tsearchTypeText\tstring\tTexto a renderizar para el método de recogida en tienda.\tundefined\tresidentialTypeText\tstring\tTexto a renderizar para el método de entrega a domicilio.\tundefined\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\tundefined","personalización#Personalización":"Para aplicar personalización de estilos al componente DeliveryInfo, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de estilos\tdeliveryInfocontainer\tdeliveryInfoText","modus-operandi#Modus Operandi":"El componente DeliveryInfo muestra la dirección y el método de entrega seleccionados. Cuando el usuario hace clic en este componente, es redirigido a la pantalla de gestión de direcciones, donde puede registrar nuevas direcciones o elegir una guardada previamente. Esto proporciona una manera sencilla y directa de gestionar las opciones de entrega."}},"/itg-mobile-framework/components/Header/SearchBar":{"title":"SearchBar","data":{"":"El componente SearchBar permite a los usuarios ingresar términos de búsqueda, facilitando la búsqueda eficiente de productos o información.","configuración#Configuración":"El componente SearchBar puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ticonsColor\tstring\tColor de los íconos de los subcomponentes.\tundefined\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\tundefined\tplaceHolder\tstring\tTexto que se muestra en la barra de búsqueda.\tundefined\tinputProps\tTextInputProps\tProps que recibe el componente TextInput para configurar su comportamiento.\tundefined\tsearchIcon\tstring\tÍcono que se renderiza en la barra de búsqueda.\tsearch","personalización#Personalización":"Para aplicar personalización de estilos al componente SearchBar, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de estilos\tsearchBarContainer\tsearchBarInput\tsearchIcon","modus-operandi#Modus Operandi":"El componente SearchBar funciona como un botón de redirección cuando la ruta actual no es Autocomplete. En la ruta Autocomplete, permite al usuario ingresar términos de búsqueda, los cuales alimentarán la fuente de datos para los componentes productSuggestions y searchSuggestions."}},"/itg-mobile-framework/components/Header/GoCart":{"title":"GoCart","data":{"":"El componente GoCart es un botón que muestra un ícono y texto. Al hacer clic, redirige a los usuarios a la pantalla del carrito, facilitando una navegación fluida hacia el carrito de compras.","configuración#Configuración":"El componente GoCart puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ticonsColor\tstring\tColor de los íconos de los subcomponentes.\tundefined\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\tundefined\tgoCartText\tstring\tTexto que se muestra junto al ícono.\tundefined\tgoCarticon\tstring\tÍcono que se renderiza para el botón del carrito.\tcart","personalización#Personalización":"Para aplicar personalización de estilos al componente GoCart, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de estilos\tgoCartContainer\tgoCartText\tgoCartIcon","modus-operandi#Modus Operandi":"El comportamiento del componente GoCart permite a los usuarios acceder fácilmente a su carrito de compras. Al hacer clic en el botón, los usuarios son redirigidos a la pantalla correspondiente, donde pueden revisar y modificar los artículos de su carrito."}},"/itg-mobile-framework/components/CategoryMenu":{"title":"Category Menu","data":{"":"El componente CategoryMenu permite al usuario navegar a traves del arbol de categorías de la tienda.","configuración#Configuración":"El componente CategoryMenu puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttreeLevel\tnumber\tCantidad de niveles a renderizar del arbol de categorías\t3\tshowOnlySelected\tboolean\tMostrar una sola categoría desplegada a la vez.\tfalse\tcategories\t[Category](#category)\tArreglo de categorías a renderizar en el menú.\t[]\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","category#Category":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tid\tstring\tid de la categoríaa\t-\tname\tstring\tNombre de la categoría\t-\tslug\tstring\tAn array of categories to render in the menu.\t-\thref\tstring\tAdditional class name to apply custom styles.\t-\thasChildren\tboolean\tTiene categorías anidadas\t-\tchildren\t[Category[]](#category)\tArreglo de categorías a renderizar en el menú\t-","personalización#Personalización":"In order to apply style customizations to the CategoryMenu component, follow the instructions given in the recipe on [Using className Handles for store customization](TODO: Link to styles hook docs).\nCSS Handles\tCategoriesGlobalContainer\tcategoriesContainer\tcategoriesText\tchildCategoryText\tsubCategoriesContainer\tsubCategoriesText","modus-operandi#Modus Operandi":"El arbol de categorías del menú usará las categorías obtenidas de tu servicio. Si pasas un arbol de categorías como propiedad al componente, será usado en su lugar."}},"/itg-mobile-framework/components/ImageList":{"title":"ImageList","data":{"":"El componente ImageList es un slider de imágenes que ofrece opciones de navegación personalizables. Esto permite que el deslizador funcione automáticamente o en un bucle infinito, según las necesidades de la tienda.","configuration#Configuration":"El componente ImageList puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de Propiedad\tTipo\tDescripción\tValor por Defecto\timages\tImage[]\tArreglo de imágenes que se mostrarán en el deslizador\t-\tautoplay\tboolean\tHabilita la reproducción automática del deslizador\tfalse\tinfinite\tboolean\tHabilita el comportamiento de desplazamiento infinito en el deslizador\tfalse\tshowPaginationDots\tboolean\tVisibilidad de los puntos de paginación en el deslizador\tfalse\theight\tnumber | string\tAltura del componente\t40% de la altura de la pantalla\tobjectFit\tstring\tDefine cómo se ajusta el contenido de la imagen dentro del contenedor\tfill\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente","image#Image":"Nombre de Propiedad\tTipo\tDescripción\tValor por Defecto\timage\tstring\tURL de la imagen\t-\tlink\tLink\tObjeto de enlace asociado\t-","link#Link":"Nombre de Propiedad\tTipo\tDescripción\tValor por Defecto\tslug\tstring\tURL a la que se redirige al hacer clic en la imagen\t-\ttypeOfRedirect\tEnum: typeOfRedirect\tTipo de redirección a realizar\t-\texternal\tboolean\tIndica si la URL es interna o externa\t-","typeofredirect#typeOfRedirect":"Valor\tDescripción\tDepartamento\tRedirige a una página de departamento.\tCategoría\tRedirige a una página de categoría.\tSubcategoría\tRedirige a una página de subcategoría.\tTérmino\tRedirige a una página de término de búsqueda.\tColección\tRedirige a una página de colección.\tMarca\tRedirige a una página de marca específica.","personalización#Personalización":"Para aplicar personalización de estilos al componente ImageList, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nClases CSS\timageListContainer\timageListDotsContainer\timageListDot\timageListActiveDot\timageListContainerItem\timageListImage"}},"/itg-mobile-framework/components/ImageSlider":{"title":"Image Slider","data":{"":"Este componente proporciona funcionalidad para mostrar un slider de imágenes. Cada imagen se acompaña de un texto descriptivo, además de que al recibir links, permite navegar a traves de la aplicación.","configuración#Configuración":"El componente ImageSlider puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\timages\tImage[]\tArreglo de objetos de tipo Image a mostrar en el deslizador.\t-\titemsPerView\tnumber\tNúmero de elementos a mostrar por vista en el deslizador.\t-\tshowPartialImage\tboolean\tIndica si debe mostrar parcialmente la siguiente imagen del deslizador.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","image#Image":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\timage\tstring\tURL de la imagen a mostrar.\t-\ttext\tstring\tTexto descriptivo de la imagen.\t-\tlink\tLink\tObjeto de tipo Link que contiene información de redirección.\t-\tid\tstring\tIdentificador único de la imagen.\t-\tname\tstring\tNombre de la imagen.\t-","link#Link":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tslug\tstring\tSlug de la URL de redirección.\t-\ttypeOfRedirect\tEnum: typeOfRedirect\tTipo de redirección a realizar\t-","typeofredirect#typeOfRedirect":"Valor\tDescripción\tDepartamento\tRedirige a una página de departamento.\tCategoría\tRedirige a una página de categoría.\tSubcategoría\tRedirige a una página de subcategoría.\tTérmino\tRedirige a una página de término de búsqueda.\tColección\tRedirige a una página de colección.\tMarca\tRedirige a una página de marca específica.","personalización#Personalización":"Para aplicar personalización de estilos al componente imageSlider, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nManejo de Estilos\timageSliderContainer\timageSliderContainerContentContainerStyle\timageSliderContainerItemContainer\timageSliderContainerImageStyle\timageSliderContainerText"}},"/itg-mobile-framework/components/Header/Header":{"title":"Header","data":{"":"El componente Header es una parte fundamental de la interfaz de usuario en una tienda en línea. Está ubicado en la parte superior de la pantalla y ofrece a los usuarios acceso a varias funciones clave.","subcomponentes-del-header#Subcomponentes del Header:":"GoBack: Permite al usuario volver a la pantalla anterior.GoCart: Muestra la cantidad de artículos en el carrito de compras y permite al usuario acceder a él.SearchBar: Permite al usuario buscar productos por nombre, categoría o descripción.DeliveryInfo: Muestra información sobre el método de entrega del pedido, como el tiempo estimado de llegada o el costo de envío.Drawer: Permite abrir un menú lateral con contenido personalizable.","configuración#Configuración":"El componente Header puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tvariant\t'simple' 'complete' 'lite'\tVariante del Header a renderizar.\t'complete'\ticonsColor\tstring\tColor de los íconos de los subcomponentes.\t'#fff'\theaderText\tstring\tTexto que se muestra en el centro del Header.\t-\tgoBackText\tstring\tTexto para el botón de regresar.\t-\tgoCartText\tstring\tTexto para el botón del carrito.\t-\tmenuText\tstring\tTexto para el botón del menú.\t-\tclassName\tstring\tNombre de clase adicional para aplicar estilos personalizados.\t-\tdrawerIcon\tstring\tÍcono para abrir el menú lateral.\t'drawer'\tcloseIcon\tstring\tÍcono para cerrar el menú lateral.\t'close'\ticonCloseColor\tstring\tColor de los íconos de cerrar.\t-\tsearchIcon\tstring\tÍcono para el botón de búsqueda.\t'search'\tgoCarticon\tstring\tÍcono para el botón del carrito.\t'cart'\tgoBackicon\tstring\tÍcono para el botón de regresar.\t'goBack'","personalización#Personalización":"Para aplicar personalización de estilos al componente Header, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de estilos\theaderWrapper\theaderTitle\theaderRowContainer1\theaderRowContainer2\theaderRowContainer3\tgoBackContainer\tgoBackIcon\tgoBackText\tgoCartContainer\tgoCartText\tgoCartIcon\tdrawerContainer\tdrawerText\tdrawerIcon\tmodalBackground\tmodalContainer\tcloseContainer\tcloseIcon\tsearchBarContainer\tsearchBarInput\tsearchIcon\tdeliveryInfocontainer\tdeliveryInfoText","modus-operandi#Modus Operandi":"El comportamiento del componente Header varía según la variante (variant) seleccionada.\ncomplete \nlite \nsimple"}},"/itg-mobile-framework/components/Login/EmailInput":{"title":"EmailInput","data":{"":"El componente EmailInput proporciona un campo de entrada de correo electrónico. Este componente es esencial para flujos que requieren la captura de correos electrónicos, como el registro y la recuperación de contraseñas.","configuración#Configuración":"El componente EmailInput puede configurarse con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tonEmailChange\tfunction\tFunción invocada cuando el correo electrónico cambia.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","especificaciones#Especificaciones":"Aclaración: Actualmente este componente está destinado únicamente para uso interno en el desarrollo de componentes del framework y no está exportado como un componente independiente.","personalización#Personalización":"Para aplicar personalización de estilos al componente EmailInput, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\temailInputComponentContainer\temailInputContainer\temailInputIcon\temailInput\temailInputErrorMessage"}},"/itg-mobile-framework/components/Login/OtpAndPasswordScreen":{"title":"OtpAndPasswordScreen","data":{"":"El componente OtpAndPasswordScreen es utilizado en los flujos de registro y recuperación de contraseñas. Es una pantalla que permite a los usuarios ingresar un código OTP enviado a su correo electrónico, seguido de la creación o actualización de su contraseña. El componente incluye campos para el OTP y la nueva contraseña, junto con opciones para reenviar el código y validaciones de contraseña.","configuración#Configuración":"El componente OtpAndPasswordScreen acepta las siguientes propiedades para su configuración:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tpasswordRegex\tobject\tExpresión regular para validar la contraseña ingresada.\t-\thandlePasswordOnChange\tfunction\tFunción que maneja los cambios en el campo de contraseña.\t-\thandleCheckPassword\tfunction\tFunción para validar la confirmación de la contraseña.\t-\thandleSubmit\tfunction\tFunción que se ejecuta al enviar el formulario.\t-\ttitle\tstring\tTítulo que se muestra en la pantalla.\t-\thandleOtpDispatch\tfunction\tFunción para manejar los cambios en el código OTP.\t-\terrorMessageSubmit\tobject\tMensajes de error para el OTP o la contraseña.\t-\thandleResentOtp\tfunction\tFunción para reenviar el código OTP.\t-\tisLoading\tobject\tIndicadores de carga para el reenviar OTP o el envío del formulario.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","especificaciones#Especificaciones":"Aclaración: Actualmente este componente está destinado únicamente para uso interno en el desarrollo de componentes del framework y no está exportado como un componente independiente.","personalización#Personalización":"Para personalizar los estilos del componente OtpAndPasswordScreen, se pueden utilizar las siguientes clases CSS. Sigue las instrucciones de la guía sobre Estiliza tus componentes.\nClases CSS\tcontainerScreenOtpAndPassword\ttitleScreenOtpAndPassword\tsubtitleScreenOtpAndPassword\tcontainerSubmitScreenOtpAndPassword\ttextButtonSubmitScreenOtpAndPassword\tcontainerOtpScreenOtpAndPassword\ttextOtpScreenOtpAndPassword\ttextButtonResendScreenOtpAndPassword\terrorMessageScreenOtpAndPassword"}},"/itg-mobile-framework/components/InfoCard":{"title":"Info Card","data":{"":"El componente InfoCard esta diseñado para presentar información de manera concisa y organizada. Se utiliza para mostrar detalles relevantes sobre un tema específico, como un producto, una marca o una categoría, proporciona una vista rápida de la información esencial y permite la navegación a información más detallada.","configuración#Configuración":"El componente InfoCard puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tEl título mostrado en el InfoCard.\t-\timageUrl\tstring\tLa URL de la imagen que se mostrará en el InfoCard.\t-\timageText\tstring\tEl texto descriptivo que se coloca sobre la imagen.\t-\tbuttonText\tstring\tEl texto mostrado en el botón del InfoCard.\t-\tcontentPosition\tenum\tLa posición del contenido (descripción, botón) dentro del InfoCard. Valores disponibles (center, left, right).\tleft\tcallToActionText\tstring\tEl texto mostrado en el botón de llamada a la acción.\t-\tcallToActionUrl\tstring\tEnlace o URL que dirige a los usuarios a una acción o destino específico cuando hacen clic en el componente InfoCard.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente InfoCard, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de estilos\tinfoCardContainer\tinfoCardHeaderContainer\tinfoCardTitle\tinfoCardCallToActionContainer\tinfoCardCallToActionText\tinfoCardImageBackground\tinfoCardContentText\tinfoCardButtonContainer\tinfoCardButtonText"}},"/itg-mobile-framework/components/Login/OtpInput":{"title":"OTPInput","data":{"":"El componente OTPInput está diseñado para su uso en formularios que requieran la entrada de códigos de un solo uso (OTP), comúnmente utilizados para autenticación de dos factores o verificación de identidad. Facilita el ingreso de estos códigos de manera segura y eficiente.","configuración#Configuración":"El componente OTPInput puede configurarse con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\thandleOtpDispatch\tfunction\tFunción para gestionar los cambios en el código OTP ingresado.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","especificaciones#Especificaciones":"Aclaración: Actualmente este componente está destinado únicamente para uso interno en el desarrollo de componentes del framework y no está exportado como un componente independiente.","personalización#Personalización":"Para aplicar personalización de estilos al componente OTPInput, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\totpInputContainer\totpInputOtp"}},"/itg-mobile-framework/components/Login/PasswordInput":{"title":"PasswordInput","data":{"":"El componente PasswordInput está diseñado para su uso en formularios que requieran la entrada de contraseñas de manera segura. Proporciona la opción de mostrar u ocultar la contraseña para facilitar su visualización según la preferencia del usuario, asegurando al mismo tiempo la protección de la información sensible.","configuración#Configuración":"El componente PasswordInput puede configurarse con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\terrorMessage\tstring\tMensaje de error para la validación de la contraseña.\t-\thandleOnChange\tfunction\tFunción para manejar los cambios en la contraseña.\t-\tplaceholder\tstring\tPlaceholder para el campo de contraseña.\t-\tpasswordRegex\tRegExp\tExpresión regular para la validación de la contraseña.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","especificaciones#Especificaciones":"Aclaración: Actualmente este componente está destinado únicamente para uso interno en el desarrollo de componentes del framework y no está exportado como un componente independiente.","personalización#Personalización":"Para aplicar personalización de estilos al componente PasswordInput, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tpasswordInputComponentContainer\tpasswordInputContainer\tpasswordInput\tpasswordInputError\tpasswordInputIconEyeContainer\tpasswordInputEyeIcons\tpasswordInputLockIcon"}},"/itg-mobile-framework/components/Login/Login":{"title":"Login","data":{"":"El componente Login permite al usuario realizar un proceso de autenticación. Esto incluye flujos como, inicio de sesión, registro con correo y contraseña u otp, registro para nuevos usuarios o recuperación de contraseña. Renderizará dinamicamente inicio de sesión o de registro según la configuración proporcionada.","configuración#Configuración":"El componente Login puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tdefaultScreen\tEnum: defaultScreen\tPantalla predeterminada (Login / Registro).\t-\tpasswordRegex\tstring\tExpresión regular para la validación de contraseñas.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","defaultscreen#defaultScreen":"Valor\tDescripción\tregisterScreen\tPantalla de registro.\tloginScreen\tPantalla de inicio de sesión.","personalización#Personalización":"Para aplicar personalización de estilos al componente Login, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tcontainerRegisterScreen\tcontainerLoginScreen\t\nEmail And Password Screen\temailPasswordScreenBackButton\temailPasswordScreenBackButtonIcon\temailPasswordScreenTitle\temailPasswordScreenSubTitle\temailPasswordScreenLoginButton\temailPasswordScreenTextLoginButton\temailPasswordScreenOrWhitText\temailPasswordScreenOtpButton\temailPasswordScreenTextOtpButton\temailPasswordScreenGuestButton\temailPasswordScreenTextGuestButton\temailPasswordScreenForgotPasswordLink\temailPasswordScreenForgotPasswordText\t\nCode By Email Screen\tcodeByEmailBackButton\tcodeByEmailBackButtonIcon\tcodeByEmailScreenTitle\tcodeByEmailScreenSubTitle\tcodeByEmailInputErrorMessage\tcodeByEmailContinueButton\tcodeByEmailTextContinueButton\t\nOtp Screen\totpScreenBackButton\totpScreenBackButtonIcon\totpScreenTitle\totpScreenSubTitle\totpScreenSendOtpButton\totpScreenSendOtpButtonText\totpScreenInputErrorMessage\totpScreenTextOtp\totpScreenTextButtonResendOtp\t\nRecovery Password Screen\trecoveryPasswordScreenContainer\trecoveryPasswordScreenBackButton\trecoveryPasswordScreenBackButtonIcon\trecoveryPasswordScreenTitle\trecoveryPasswordScreenSubTitle\trecoveryPasswordScreenButton\trecoveryPasswordScreenButtonText\trecoveryPasswordScreenInputErrorMessage\t\nOtp Recovery Password Screen\totpRPWScreenContainer\totpRPWScreenBackButton\totpRPWScreenBackButtonIcon\t\nRegister Email Screen\tregisterEmailScreenContainer\tregisterEmailScreenBackButton\tregisterEmailScreenBackButtonIcon\tregisterEmailScreenTitleContainer\tregisterEmailScreenTitle\tregisterEmailScreenSubtitle\tregisterEmailScreenButtonContinue\tregisterEmailScreenTextContinue\tregisterEmailScreenAccount\tregisterEmailScreenButtonLogin\tregisterEmailScreenTextLogin\t\nRegister Form Screen\tregisterFormScreenBackButton\tregisterFormScreenBackButtonIcon\tregisterFormScreenContainer\tregisterFormScreenTitleContainer\tregisterFormScreenTitle\tregisterFormScreenSubtitle\tregisterFormScreenButtonContinueContainer\tregisterFormScreenButtonContinue\tregisterFormScreenButtonContinueText\tregisterFormScreenTitleAndForm\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nOtpAndPasswordScreen\nPasswordInput\nOtpInput\nEmailInput"}},"/itg-mobile-framework/components/ModalCustom":{"title":"Modal Custom Component","data":{"":"El componente ModalCustom permite tener un modal facilmente personalizable y listo para utilizrar.","configuración#Configuración":"El componente ModalCustom puede ser configurado con las siguientes propiedades:","modalcustomprops#ModalCustomProps":"Nombre de Propiedad\tTipo\tDescripción\tValor por Defecto\tvisible\tboolean\tControla la visibilidad del modal. Si visible es true, el modal se muestra; si es false, el modal se oculta.\t-\tsetVisible\tfunction\tFunción que permite actualizar la propiedad visible. Recibe un valor booleano (true para mostrar, false para ocultar) y se encarga de manejar el cambio de estado del modal.\t-\tshowCloseButton\tboolean\tDetermina si el modal debe incluir un botón de cierre (generalmente una \"X\" en la esquina superior). Si es true, el botón se mostrará.\t-\tanimationType\tenum('none', 'slide', 'fade')\tEspecifica el tipo de animación para la aparición y desaparición del modal.\t- none\tcontentPosition\tenum('top', 'center', 'bottom')\tPermite personalizar la posición del modal en la pantalla.\t- bottom\tchildren\tReact.ReactNode\tEsta propiedad permite colocar contenido dentro del modal. Puede consistir en texto, imágenes, formularios o incluso otros componentes React.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-\tparentStyles\tstring\tNombre de clase CSS encontrada en los estilos predeterminados del componente padre que llama al componente Modal.\t-","modus-operandi#Modus Operandi":"Este componente es parte de los componentes comunes y puede ser utilizado dentro de otros componentes, a continuación se proporciona un ejemplo de uso\nimport React, { useState } from 'react'\nimport { View, Text, TouchableOpacity } from 'react-native'\nimport ModalCustom from '../src/components/Commons/ModalCustom'\nconst CustomComponent = () => {\n  const [visible, setVisible] = useState(false)\n  const ContentComponent = () => {\n    return (\n      <>\n        <View>\n          <Text>Título</Text>\n          <Text>Subtítulo en este componente</Text>\n        </View>\n        <View style={styles.footer}>\n          <TouchableOpacity>\n            <Text>Cancelar</Text>\n          </TouchableOpacity>\n          <TouchableOpacity>\n            <Text>Aceptar</Text>\n          </TouchableOpacity>\n        </View>\n      </>\n    )\n  }\n  return (\n    <>\n      <TouchableOpacity onPress={() => setVisible(true)}>\n        <Text>Mostrar Modal</Text>\n      </TouchableOpacity>\n      <ModalCustom\n        visible={visible}\n        setVisible={setVisible}\n        showCloseButton={true}\n        children={<ContentComponent />}\n      />\n    </>\n  )\n}"}},"/itg-mobile-framework/components/NewsLetter":{"title":"NewsLetter","data":{"":"El componente NewsLetter permite al usuario suscribirse a la newsLetter de la tienda.","configuración#Configuración":"El componente NewsLetter puede configurarse con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto del título del formulario de suscripción\tSuscríbete a nuestro newsletter\tplaceholder\tstring\tTexto de placeholder para el campo de correo electrónico\tIngresa tu correo electrónico\tbuttonText\tstring\tTexto del botón de suscripción\tSuscribirse\tthanksMessage\tstring\tMensaje mostrado después de que el usuario se suscriba\tGracias por suscribirte\tbackButtonText\tstring\tTexto del botón para volver al formulario después de ver el mensaje de agradecimiento\tVolver al formulario\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente NewsLetter, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tnewsLetterContainer\tnewsLetterInfoContainer\tnewsLetterTitle\tnewsLetterContainerInputButton\tnewsLetterInput\tnewsLetterButton\tnewsLetterButtonText\tnewsLetterThanksMessageContainer\tnewsLetterThanksMessageTitle\tnewsLetterGoBackButton\tnewsLetterGoBackButtonText\tnewsLetterError"}},"/itg-mobile-framework/components/MaintenanceScreen":{"title":"MaintenanceScreen","data":{"":"El componente MaintenanceScreen se utiliza para informar a los usuarios de que la tienda está actualmente en mantenimiento. Presenta un modal en pantalla completa con un título, una descripción y una imagen de fondo. Mientras este modal esté montado, bloquea el acceso a todas las funcionalidades de la aplicación, asegurando que los usuarios no puedan interactuar con otras partes de la app durante el mantenimiento.","configuración#Configuración":"El componente MaintenanceScreen puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTítulo de la pantalla de mantenimiento\t-\tdescription\tstring\tDescripción adicional que se muestra debajo del título\t-\timage\tstring\tURL de la imágen\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente MaintenanceScreen, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tmaintenanceScreenModalContainer\tmaintenanceScreenModalContent\tmaintenanceScreenTitle\tmaintenanceScreenDescription\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nImageBackground"}},"/itg-mobile-framework/components/OrderDetail/OrderItemsInfo":{"title":"Order Items Info","data":{"":"El componente OrderItemsInfo esta diseñado para mostrar los productos en una orden de compra.","configuración#Configuración":"El componente OrderItemsInfo puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente OrderItemsInfo, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderItemsInfoContainer\torderItemsInfoDivider1\torderItemsInfoDivider2\torderItemInfoContainer\torderItemInfoImage\torderItemInfoTextsContainer\torderItemInfoProductTitle\torderItemInfoProductPrice\torderItemInfoProductQuantity"}},"/itg-mobile-framework/components/OrderDetail/OrderEstimatedDate":{"title":"Order Estimated Date","data":{"":"El componente OrderEstimatedDate esta diseñado para mostrar la fecha estimada de envio de una orden de compra.","configuración#Configuración":"El componente OrderEstimatedDate puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto que se muestra como título en el componente\tFecha de entrega\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente OrderEstimatedDate, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderEstimatedDateContainer\torderEstimatedDateTitle\torderEstimatedDateText"}},"/itg-mobile-framework/components/OrderDetail/OrderPaymentMethod":{"title":"Order Payment Method","data":{"":"El componente OrderPaymentMethod esta diseñado para mostrar el metodo de pago usado en una orden de compra.","configuración#Configuración":"El componente OrderPaymentMethod puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto que se muestra como título en el componente\tMétodo de Pago\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente OrderPaymentMethod, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderPaymentMethodContainer\torderPaymentMethodTitle\torderPaymentMethodText"}},"/itg-mobile-framework/components/OrderDetail/OrderIdStatus":{"title":"Order Id-Status","data":{"":"El componente OrderIdStatus esta diseñado para mostrar el identificador y estado de una orden de compra.","configuración#Configuración":"El componente OrderEstimatedDate puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tparentStyles\tStylesheet.NamedStyles\tEstilos proporcionados por el componente padre\t-\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente OrderIdStatus, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderIdStatusContainer\torderId\torderStatus"}},"/itg-mobile-framework/components/OrderDetail/OrderPaymentSummary":{"title":"Order Payment Summery","data":{"":"El componente OrderPaymentSummary esta diseñado para mostrar el resumen de pago en una order de compra.","configuración#Configuración":"El componente OrderPaymentSummary puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto que se muestra como título en el componente\tResumen de pago\ttotalText\tstring\tTexto que se muestra como etiqueta para el precio total\tTotal\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente OrderPaymentSummary, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderPaymentSummaryContainer\torderPaymentSummaryTitle\torderPaymentSummaryItemContainer\torderPaymentSummaryDivider\torderPaymentSummaryText\torderPaymentSummaryTotalText"}},"/itg-mobile-framework/components/OrderDetail/OrderShippingInfo":{"title":"Order Shipping Info","data":{"":"El componente OrderShippingInfo esta diseñado para mostrar la direccion de envio en una order de compra.","configuración#Configuración":"El componente OrderShippingInfo puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto que se muestra como título en el componente\tDirección de entrega\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente OrderShippingInfo, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderShippingInfoContainer\torderShippingInfoTitle\torderShippingInfoText\torderShippingInfoDivider"}},"/itg-mobile-framework/components/OrderPlaced/ClientProfileData":{"title":"Client Profile Data","data":{"":"El componente ClientProfileData esta diseñado para mostrar los datos personales del cliente en una orden de compra.","configuración#Configuración":"El componente ClientProfileData puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto que se muestra como título en el componente\tInformacion principal\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ClientProfileData, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tclientProfileDataContainer\tclientProfileDataTitle\tclientProfileDataText\tclientProfileDataDivider"}},"/itg-mobile-framework/components/OrderPlaced/OrderPlaced":{"title":"Order Placed Screen","data":{"":"The Order Placed Screen It is a page that can be built with a series of components which are described belowComponents of the Order Placed Screen:\nthank-you-message: Display the thank you message and order ID with customizable message.\ntitle-section: Display the Title Section for an section.\nclient-profile-data: display the info of client.\npayment-summary: Displays the payment summary an order.\nshipping-info: Display the selected delivery address or pickup point for an order.\norder-group-info: Display the diferents order info for an order group.\norders-button: redirect to orders screen.","modus-operandi#Modus Operandi":"The behavior of the Order Placed Screen screen varies depending on the configuration of the platform used as Headless CMS and the properties provided for each component independently."}},"/itg-mobile-framework/components/OrderPlaced/ShippingInfo":{"title":"ShippingInfo","data":{"":"El componente ShippingInfo está diseñado para mostrar la dirección de entrega seleccionada para una orden en el Order Placed.","configuración#Configuración":"El componente ShippingInfo se puede configurar con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto del título que se renderizará.\tDirección de entrega\tclassName\tstring\tNombre de clase CSS adicional para aplicar estilos personalizados.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ShippingInfo, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderShippingInfoContainer\torderShippingInfoDivider\torderShippingInfoTitle\torderShippingInfoText"}},"/itg-mobile-framework/components/OrderPlaced/PaymentSummary":{"title":"PaymentSummary","data":{"":"El componente PaymentSummary está diseñado para mostrar el resumen del pago de una orden en el Order Placed.","configuración#Configuración":"El componente PaymentSummary se puede configurar con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto del título que se renderizará.\tResumen del pago\ttotalText\tstring\tTexto que se mostrará en la sección de total.\tTotal\tclassName\tstring\tNombre de clase CSS adicional para aplicar estilos personalizados.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente PaymentSummary, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\torderPaymentSummaryContainer\torderPaymentSummaryDivider\torderPaymentSummaryTitle\torderPaymentSummaryItemContainer\torderPaymentSummaryText\torderPaymentSummaryTax\torderPaymentSummaryDiscount\torderPaymentSummaryTotalText"}},"/itg-mobile-framework/components/OrderPlaced/TitleSection":{"title":"TitleSection","data":{"":"El componente TitleSection se utiliza para mostrar el título de una sección específica, acompañado de un divisor (divider) debajo del texto. Esto permite separar visualmente la sección del resto del contenido de manera clara y efectiva.","configuración#Configuración":"El componente TitleSection puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto del título\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente TitleSection, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\ttitleSectionContainer\ttitleSectionDivider\ttitleSectionTitle"}},"/itg-mobile-framework/components/Product/ProductDescription":{"title":"Product Description","data":{"":"El componente ProductDescription muestra la descripción del producto actual.","configuration#Configuration":"El componente ProductDescription puede ser configurado con las siguientes propiedades:","props#Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductDescription, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyles Handles\tProductDetailcontainerDescription\tProductDetailtitleDescription\tProductDetailtextDescription"}},"/itg-mobile-framework/components/Product/ProductAddToCartButton":{"title":"ProductAddToCartButton","data":{"":"El componente ProductAddToCartButton permite agregar el producto al carrito de compras desde la PDP.","configuración#Configuración":"El componente ProductAddToCartButton puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\trequireAuthentication\tboolean\tSi es true, requiere que el usuario esté autenticado antes de agregar al carrito\tfalse\trequireShippingMethod\tboolean\tSi es true, requiere la selección de un método de envío antes de agregar al carrito\tfalse\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductAddToCartButton, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nAddToCartButton"}},"/itg-mobile-framework/components/Product/ProductBrand":{"title":"ProductBrand","data":{"":"El componente ProductBrand se utiliza para mostrar la marca del producto en la PDP.","configuración#Configuración":"El componente ProductBrand puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductBrand, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductBrandContainer\tproductBrandText"}},"/itg-mobile-framework/components/Product/ProductName":{"title":"ProductName","data":{"":"El componente ProductName se utiliza para mostrar el nombre del producto en la PDP.","configuración#Configuración":"El componente ProductName puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductName, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductNameContainer\tproductNameText"}},"/itg-mobile-framework/components/Product/ProductAvailableQuatity":{"title":"Product Available Quantity","data":{"":"El componente ProductAvailableQuantity permite conocer la cantidad disponible del producto actual.","configuration#Configuration":"El componente ProductAvailableQuantity puede ser configurado con las siguientes propiedades:","props#Props":"Prop name\tType\tDescription\tDefault value\ttextAvailableQuantity\tstring\tTexto que muestra la cantidad disponible.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductAvailableQuantity, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyles Handles\tcontainerAvailableQuantity\tavailableQuantityText"}},"/itg-mobile-framework/components/Product/ProductSkuSelector":{"title":"ProductSkuSelector","data":{"":"El componente ProductSkuSelector se utiliza para seleccionar variaciones de SKU del producto en la PDP. Permite a los usuarios elegir diferentes combinaciones de características, como color o tamaño, para encontrar la variación exacta del producto.","configuración#Configuración":"El componente ProductSkuSelector puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductSkuSelector, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductDetailSkuSelector\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nSkuSelector"}},"/itg-mobile-framework/components/Product/ProductImages":{"title":"ProductImages","data":{"":"El componente ProductImages se utiliza para mostrar la imagen o las imágenes de un producto en la PDP. El componente permite que los usuarios visualicen múltiples imágenes del producto, con la funcionalidad de deslizar entre ellas.","configuración#Configuración":"El componente ProductImages puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductImages, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductImagesContainerImage\tproductImagesSliderContainer\tproductImagesImage\tproductImagesPagination\tproductImagesDot\tproductImagesActiveDot"}},"/itg-mobile-framework/components/Product/ProductPrice":{"title":"ProductDetailPrice","data":{"":"El componente ProductDetailPrice se utiliza para mostrar el precio de un producto en la PDP. Si el producto tiene descuento, también se muestra el precio anterior y el descuento aplicado.","configuración#Configuración":"El componente ProductDetailPrice puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductDetailPrice, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductPriceContainer\tproductPriceText\tproductPriceDiscountContainer\tproductPriceDiscountTextContainer\tproductPriceDiscountText\tproductPriceDiscountValue\tproductPriceListPrice"}},"/itg-mobile-framework/components/Product/ProductSpecifications":{"title":"Product Specifications","data":{"":"El componente ProductSpecifications brinda detalles de especificaciones del producto actual.","configuration#Configuration":"El componente ProductSpecifications puede ser configurado con las siguientes propiedades:","props#Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductSpecifications, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyles Handles\tspecificationsContainer\tspecificationsTitle\tspecificationsContentContainer\tspecificationsRowContainer\tspecificationsRowName\tspecificationsRowValue\toddRowColor\tevenRowColor\tspecificationsTextName\tspecificationsTextValue"}},"/itg-mobile-framework/components/Product/README":{"title":"Product Detail Container Component","data":{"":"The Product Detail Container Component is designed to manage the display of product details within a store. It coordinates with various sub-components to render information such as product image, brand, name, price, description, specifications, and more.","configuration#Configuration":"","exported-components#Exported Components":"Component\tDescription\tProductDetail\tMain component managing the display of product details.\tProductDetailImage\tRenders the product image.\tProductDetailFlags\tDisplays flags associated with the product.\tProductDetailBrand\tShows the brand name of the product.\tProductDetailName\tDisplays the name of the product.\tProductDetailPrice\tDisplays the price of the product.\tProductDetailSku\tShows the SKU (Stock Keeping Unit) of the product.\tProductDetailQuantitySelector\tAllows selecting the quantity of the product to purchase.\tAddToCartButton\tButton to add the product to the cart.\tShareMedia\tProvides options for sharing the product on social media.\tDivider\tRenders a divider between different sections.\tProductDetailDescription\tDisplays the description of the product.\tProductDetailSpecifications\tShows specifications of the product.","productdetail-props#ProductDetail Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.\t''\tproduct\tobject\tInformation about the product being displayed.\t{}\tselectedItem\tobject\tCurrently selected item\t{}\ticonOrder\tstring[]\tOrder of icons for sharing media.\t[]","iconorder-array-props#iconOrder array Props":"Prop name\tType\tDescription\tDefault value\ticonOrder\tstring[]\tOrder of icons for sharing media. Omitting an icon will exclude it from display\t['whatsapp', 'instagram', 'facebook']","productdetailimage-props#ProductDetailImage Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.\t''\tscrollViewRef\tReact.RefObject\tReference to the ScrollView component.\t\thandleScroll\tFunction\tHandler function for scroll events.\t\tcurrentIndex\tnumber\tIndex of the currently displayed image.\t\thandlePaginationPress\tFunction\tHandler function for pagination button presses.","productdetailflags-props#ProductDetailFlags Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.","productdetailbrand-props#ProductDetailBrand Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.","productdetailname-props#ProductDetailName Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.","productdetailprice-props-sub-component-productdetaildiscount#ProductDetailPrice Props [sub-component: ProductDetailDiscount]":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.","productdetaildiscount-props#ProductDetailDiscount Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.\t\tlistPrice\tnumber\tThe original price of the product.\t\tprice\tnumber\tThe current price of the product.\t\tgetDiscount\tFunction\tFunction to calculate the discount based on the list and current prices.","productdetailsku-props#ProductDetailSku Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.\t\thandleSelectSKU\t(selectedSku: Item) => void\tFunction to handle the selection of a SKU item.","productdetailquantityselector-props#ProductDetailQuantitySelector Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.\t\tdecrementQuantity\t() => void\tFunction to decrement the quantity.\t\tincrementQuantity\t() => void\tFunction to increment the quantity.\t\tquantity\tnumber\tThe current quantity selected.\t\tavailableQuantity\tnumber\tThe available quantity for selection.","addtocartbutton-props#AddToCartButton Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.","sharemedia-props#ShareMedia Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.\t\ticonOrder\tstring[]\tOrder of icons for sharing media.\t['facebook', 'instagram', 'whatsapp']\trenderIcon\tfunction\tFunction to render each share media icon based on its icon name.","divider-props#Divider Props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tCustom class name for styling purposes.\t-\tmarginTop\tnumber\tMargin on top of the divider.\t8\tmarginBottom\tnumber\tMargin at the bottom of the divider.\t16","productdetaildescription-props#ProductDetailDescription Props":"Prop name\tType\tDescription\tclassName\tstring\tCustom class name for styling purposes.","productdetailspecifications-props#ProductDetailSpecifications Props":"Prop name\tType\tDescription\tclassName\tstring\tCustom class name for styling purposes.","customization#Customization":"In order to apply style customizations in this and other blocks, follow the instructions given in the recipe on [Using className Handles for store customization](TODO: Link to styles hook docs).","productdetailimage-component#ProductDetailImage Component":"CSS Handles\tcontainerImage\tsliderContainer\timage\tpagination\tdot\tactiveDot","productdetailflags-component#ProductDetailFlags Component":"CSS Handles\tcontainerFlags\ttextFlags","productdetailbrand-component#ProductDetailBrand Component":"CSS Handles\tcontainerBrand\ttextBrand","productdetailname-component#ProductDetailName Component":"CSS Handles\tcontainerName\ttextName","productdetailprice-component#ProductDetailPrice Component":"CSS Handles\tcontainerPrice\ttextPrice","productdetaildiscount-component#ProductDetailDiscount Component":"CSS Handles\tcontainerDiscount\ttextContainerDiscount\ttextPrice\ttextDiscount\ttextListPrice","productdetailsku-component#ProductDetailSku Component":"CSS Handles\tcontainerSku\tskuItem\tskuImage","productdetailquantityselector-component#ProductDetailQuantitySelector Component":"CSS Handles\tcontainerQuantity\tboxQuantity\ttextQuantity\tbuttonSelectorActive\tbuttonSelectorInavtive\tbuttonSelector\ttextSelector","addtocartbutton-component#AddToCartButton Component":"CSS Handles\tcontainerButton\tboxButton\ttextButton","sharemedia-component#ShareMedia Component":"CSS Handles\tcontainerMedia","divider-component#Divider Component":"CSS Handles\tdividerContainer\tdivider","productdetaildescription-component#ProductDetailDescription Component":"CSS Handles\tcontainerDescription\ttitleDescription\ttextDescription","productdetailspecifications-component#ProductDetailSpecifications Component":"CSS Handles\tspecificationsContainer\tspecificationsTitle\tspecificationsContentContainer\tspecificationsRowContainer\tspecificationsRowName\tspecificationsRowValue\toddRowColor\tevenRowColor\tspecificationsTextName\tspecificationsTextValue"}},"/itg-mobile-framework/components/Product/SkuSelector":{"title":"SkuSelector","data":{"":"El componente SkuSelector es una herramienta versátil que permite a los usuarios seleccionar variaciones de SKU para productos, ya sea que estén viendo una página de detalles de producto o navegando por una lista de productos. Mejora la experiencia de compra proporcionando una interfaz intuitiva para seleccionar opciones de producto, como color, tamaño, etc.","configuración#Configuración":"El componente SkuSelector exporta las siguientes propiedades:","propiedades-de-skuselector#Propiedades de SkuSelector":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tvariant\tEnum: variant\tDetermina dónde se renderizará el componente, ya sea en un detalle de producto o en una lista de productos\t\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente","variant#variant":"Valor\tDescripción\tproduct-list\tSe utiliza cuando el selector de SKU se debe renderizar en una tarjeta de producto.\tproduct-detail\tSe utiliza cuando el selector de SKU se debe renderizar en la página de detalles del producto.","especificaciones#Especificaciones":"El funcionamiento del componente Sku Selector varía dependiendo del contexto en el que se utilice:\nDetalle de Producto: Cuando se utiliza en una página de detalles de producto, el Sku Selector se renderiza directamente dentro de la pantalla, permitiendo a los usuarios seleccionar variaciones de SKU sin interrupciones. Utiliza el contexto de Detalle de Producto.\nLista de Productos: Cuando se utiliza dentro de una lista de productos, el Sku Selector aparece como un modal que se activa al hacer clic en el botón \"Agregar al carrito\". Este modal proporciona una interfaz para seleccionar las variaciones de SKU deseadas antes de agregar el producto al carrito. Utiliza el contexto de Product Detail.\nAclaración: Actualmente este componente está destinado únicamente para uso interno en el desarrollo de componentes del framework y no está exportado como un componente independiente.","personalización#Personalización":"Para aplicar personalización de estilos al componente SkuSelector, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nCSS Handles\tskuSelectorContainer\tskuSpecificationContainer\tskuSpecificationTitle\tskuSpecificationValuesContainer\tskuSpecificationValue\tskuSpecificationSelectedValue\tskuSpecificationValueDisabled\tskuSpecificationValueText\tskuSpecificationSelectedValueText\tproductSkuModalImageAndInfo\tproductSkuModalImageContainer\tproductSkuModalImage\tproductSkuModalInfo\tproductSkuModalBrandAndName\tproductSkuModalBrand\tproductSkuModalName\tproductSkuModalPriceContainer\tproductSkuModalPriceAndDiscount\tproductSkuModalPrice\tproductSkuModalDiscount\tproductSkuModalAvailableQuantityText\tproductSkuModalListPrice\tproductSkuModalButtons\tproductSkuModalViewMoreContainer\tproductSkuModalViewMoreText"}},"/itg-mobile-framework/components/ProductList":{"title":"PRODUCT LIST","data":{"":"The ProductList component is designed to represent a list of products, offering the ability to apply filters and sorting. Includes an optional title and a button to access the PLP and see all related products.","configuration#Configuration":"The ProductList component exports the following props:","productlist-props#ProductList props":"Prop name\tType\tDescription\tDefault value\thideUnavailableItems\tboolean\tHide unavailable products\tfalse\tskusFilter\tstring\tProduct SKU filter\t'ALL'\tinstallmentCriteria\tstring\tDefine the rules for payment installments\t'ALL'\tcategory\tstring\tShow products from a specific category\t\tcollection\tstring\tShow products from a specific collection\t\torderBy\tstring\tSorting method for the products\t\titemsPerPage\tnumber\tNumber of products per page\t10\tmaxItems\tnumber\tMaximum number of products in the list\t100\ttitle\tstring\tProduct List Title\t'Nuevos productos'\tproductWidth\tnumber | string\tWidth of product cards\t150\timageResizeMode\tstring\tDefines how the image content of the products is adjusted\tcover\taddToCartButton\tboolean\tControl the visibility of the add to cart button for products\ttrue\ttextAddToCart\tstring\tText of the add to cart button for products\tAñadir\ttextAvailability\tstring\tText of the add to cart button for  unavailable products\tNo disponible\tbuttonActiveOpacity\tnumber\tActive opacity of the add to cart button for products\t0.5\tclassName\tstring\tClass name to apply custom styles","customization#Customization":"In order to apply style customizations in this and other blocks, follow the instructions given in the recipe on [Using className Handles for store customization](TODO: Link to styles hook docs).\nCSS Handles\tmainContainer\ttitleAndButtonContainer\tlistTitle\tlistButton\tlistButtonText\tlistContainer\tnextPageLoaderContainer\tnextPageLoader\tproductContainer\tproductImageContainer\tproductImage\tcontainerPrice\tproductListPrice\tcontainerPriceAndDiscount\tproductPrice\tproductDiscount\tproductName\tproductDescription\tproductButtonContainer\tproductButtonContainerDisabled\tproductButtonText\tproductButtonTextDisabled\tproductFlagsContainer\tproductFlag"}},"/itg-mobile-framework/components/ProductSummary/ProductSummary":{"title":"PRODUCT SUMMARY","data":{"":"The ProductSummary component is designed to summarize product information (such as name, price, and image) for display in various sections of the store, such as shelfs or product list pages (PLP).","configuration#Configuration":"The ProductSummary component exports the following props:","productsummary-props#ProductSummary props":"Prop name\tType\tDescription\tDefault value\tproduct\tobject\tProduct information\t\twidth\tnumber | string\tWidth of the component\t100%\timageResizeMode\tstring\tDefines how the content of the product image adjusts within the container\tcover\taddToCartButton\tboolean\tControls the visibility of the add to cart button, allowing it to be shown or hidden as needed\ttrue\ttextAddToCart\tstring\tAdd to cart button text\tAñadir\ttextAvailability\tstring\tAdd to cart button text when product is unavailable\tNo disponible\tbuttonActiveOpacity\tnumber\tAdd to cart button active opacity\t0.5\tclassName\tstring\tClass name to apply custom styles\t\t\nproduct object:\nProp name\tType\tDescription\tDefault value\tbrand\tstring\tBrand of the product\t\tdescription\tstring\tDescription of the product\t\tproductId\tstring\tID of the product\t\titems\tarray\tArray of SKU variations associated with the product\t\tclusterHighlights\tarray\tArray of cluster highlights related to the product\t\tproperties\tarray\tArray of properties related to the product\t\t\nitems array:\nProp name\tType\tDescription\tDefault value\titemId\tstring\tID of the item\t\timages\tarray\tArray of images associated with the item\t\tname\tstring\tName of the item\t\tsellers\tarray\tArray of sellers offering the item\t\t\nimages array:\nProp name\tType\tDescription\tDefault value\timageUrl\tstring\tUrl of the item image\t\t\nsellers array:\nProp name\tType\tDescription\tDefault value\tsellerId\tstring\tID of the seller\t\tsellerName\tstring\tName of the seller\t\tcommertialOffer\tarray\tCommercial offer details of the seller\t\t\ncommertialOffer array:\nProp name\tType\tDescription\tDefault value\tPrice\tnumber\tPrice of the item\t\tListPrice\tnumber\tList price of the item\t\tAvailableQuantity\tnumber\tAvailable quantity of the item\t\tDiscountPercentage\tnumber\tPercentage of discount applied to the item\t\t\nclusterHighlights array:\nProp name\tType\tDescription\tDefault value\tid\tany\tID of the cluster highlight\t\tname\tany\tName of the cluster highlight\t\t\nproperties array:\nProp name\tType\tDescription\tDefault value\tname\tstring\tName of the property\t\tvalues\tstring[]\tArray of values associated with the property","customization#Customization":"In order to apply style customizations in this and other blocks, follow the instructions given in the recipe on [Using className Handles for store customization](TODO: Link to styles hook docs).\nCSS Handles\tproductContainer\tproductImageContainer\tproductImage\tcontainerPrice\tproductListPrice\tcontainerPriceAndDiscount\tproductPrice\tproductDiscount\tproductName\tproductDescription\tproductButtonContainer\tproductButtonContainerDisabled\tproductButtonText\tproductButtonTextDisabled\tproductFlagsContainer\tproductFlag"}},"/itg-mobile-framework/components/Product/productDetailSellers":{"title":"ProductSellers","data":{"":"El componente ProductSellers es el encargado de renderizar los diferentes vendedores que ofrecen un mismo producto.","configuración#Configuración":"El componente ProductSellers puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductSellers, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tproductSellersContainer\tproductSellersTitle\tproductSellersSellerCardContainer\tproductSellersSellerCardSellerName\tproductSellersSellerActionsContainer\tproductSellersSellerAddToCartContainer\tproductSellersSellerQuantityContainer\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nAddToCartButton\nQuantitySelector"}},"/itg-mobile-framework/components/Product/productDetailShareMedia":{"title":"Compartir Producto en Redes Sociales","data":{"":"El componente ProductShareMedia proporciona opciones para compartir el producto en redes sociales.","configuración#Configuración":"El componente ProductShareMedia puede ser configurado con las siguientes propiedades:","props#Props":"Prop name\tType\tDescription\tDefault value\tshareOptions\tShareOption[]\tListado de opciones para compartir.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","shareoption#ShareOption":"Prop name\tType\tDescription\tDefault value\ticon\tstring\tIcono de la opción.\t-\tmessage\tstring\tMensaje para compartir.\t-\ttitle\tstring\tTítulo del mensaje (solo para Android).\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductShareMedia, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyles Handles\tproductShareMediaContainer\tshareMediaIconContainer\tshareMediaIcon"}},"/itg-mobile-framework/components/ProductSummary/WishListButton":{"title":"WishListButton","data":{"":"The WishListButton is a component which provides the ability to add or remove a product to the favorites list.","configuration#Configuration":"The WishListButton component exports the following props","wishlistbutton-props#WishListButton props":"Prop name\tType\tDescription\tDefault value\tclassName\tstring\tClass name to apply custom styles\t\ticonName\tstring\tIcon to render.\tfavorite","customization#Customization":"In order to apply style customizations to the WishListButton component, follow the instructions given in the recipe on [Using className Handles for store customization](TODO: Link to styles hook docs).\nStyleSheet\tcontainer","modus-operandi#Modus Operandi":""}},"/itg-mobile-framework/components/Profile/MyAccount":{"title":"My Account","data":{"":"El componente MyAccount muestra información personal del usuario, como su nombre, apellido, documento, fecha de nacimiento y número de teléfono. Los usuarios pueden editar esta información según sea necesario. Además, hay un botón que permite eliminar la cuenta.","configuración#Configuración":"El componente MyAccount puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tdocumentTypeOptions\tstring[]\tUn arreglo que contiene los tipos de documento\t['CC', 'TI', 'Pasaporte']\tdocumentLengthValidation\tLengthValidation\tConfiguración de validación para el campo Documento\t-\tphoneNumberLengthValidation\tLengthValidation\tConfiguración de validación para el campo Teléfono\t-\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","lengthvalidation#LengthValidation:":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tmaxLength\tnumber\tNúmero máaximo de caracteres para el Documento o el Teléfono\t-\tminLength\tnumber\tNúmero minimo de caracteres para el Documento o el Teléfono\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente MyAccount, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tmyAccountContainer\tmyAccountFormAndButtonContainer\tmyAccountFormSubmitButton\tmyAccountFormSubmitButtonText\tpersonalInfoFormContainer\tpersonalInfoFormDocumentTitle\tpersonalInfoFormDocumentContainer\tpersonalInfoFormDocumentInputContainer\tpersonalInfoFormBirthAndPhoneContainer\tpersonalInfoFormPhoneInputContainer\tpersonalInfoFormCheckboxContainer\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nDelete Account Button"}},"/itg-mobile-framework/components/Profile/DeleteAccountButton":{"title":"Delete Account Button","data":{"":"El componente DeleteAccountButton es un botón diseñado para permitir al usuario eliminar su cuenta. Cuando se presiona el botón, se activa un modal que puede funcionar en uno de dos modos: informativo o de confirmación. En el modo informativo, el modal muestra un mensaje con detalles sobre el proceso de eliminación de la cuenta, incluida la información de contacto para recibir asistencia. En el modo de confirmación, el modal le pide al usuario que confirme su intención de eliminar su cuenta y brinda opciones para continuar o cancelar la acción.\nModo informacional:\nModo de confirmación:","configuración#Configuración":"El componente DeleteAccountButton puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tmodalInfoMode\tboolean\tIndica si el modal debe actuar en modo informacional\ttrue\tmodalInfoCustomText\tstring\tTexto personalizado que se muestra en el modal informacional\t-\tmodalInfoSupportEmail\tstring\tEmail de soporte que se muestra en el modal informacional\t-\tmodalConfirmationBodyText\tstring\tTexto que se muestra como centenido del modal informacional\tEsta acción no podrá deshacerse.\tmodalConfirmationButtonText\tstring\tTexto qus se muestra en el boton de confirmación\tSí, eliminar\tmodalConfirmationBackButtonText\tstring\tTexto que se muestra en el botón de no confrimación\tNo, volver\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente DeleteAccountButton, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tdeleteAccountContainer\tdeleteAccountIconAndText\tdeleteAccountWarningIcon\tdeleteAccountText\tdeleteAccountModalContainer\tdeleteAccountModalTexts\tdeleteAccountModalDangerFlag\tdeleteAccountWarningIconModal\tdeleteAccountModalDangerFlagText\tdeleteAccountModalTitle\tdeleteAccountModalText\tdeleteAccountModalButtons\tdeleteAccountModalConfirmButton\tdeleteAccountModalConfirmButtonText\tdeleteAccountModalBackButton\tdeleteAccountModalBackButtonText\tdeleteAccountModalInfo\tdeleteAccountModalInfoText\tdeleteAccountModalInfoEmail"}},"/itg-mobile-framework/components/Profile/PaymentMethods.d":{"title":"Payment Methods","data":{"":"The Payment Methods component displays a list of payment methods. If no payment methods are available, it shows a message indicating that no payment methods are available. The component accepts several properties that allow customization of its behavior and appearance.","paymentmethods-props#PaymentMethods props":"Prop name\tType\tDescription\tDefault value\ttitle\tstring\tThe title displayed on the PaymentMethods\tMétodos de pago\ttextEmptyPayments\tstring\tTitle when no payment methods are available.\t¡Aún no tienes ningún método de pago registrado!\tclassName\tstring\tName of the class through which you can access the customization of styles.\t----------\t\nimport React from 'react'\nimport { PaymentMethodsContainer } from './path/to/index'\nconst App = () => {\n  return (\n      <PaymentMethodsContainer\n        className=\"customPaymentMethods\"\n        textEmptyPayments=\"No payment methods available\"\n        title=\"Available Payment Methods\"\n      />\n  )\n}","customization#Customization":"You can customize the appearance and behavior of the PaymentMethods component through the style handles found within the className property.\nStyles Handles\tcontainer\tcontainerText\ttitle\tcardContainer\ttitleContainer\tcardNumber\tpaymentSystemName\tcontainerIcons\temptyPaymentsContainer\temptyPaymentsText"}},"/itg-mobile-framework/components/Search/BreadCrumb":{"title":"SearchBreadCrumb","data":{"":"El componente SearchBreadCrumb es un historial de los filtros aplicados en la búsqueda actual. Cada elemento del breadcrumb es un botón que permite al usuario volver a un punto específico en su historial de filtros.","configuración#Configuración":"El componente SearchBreadCrumb puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\thomeIconName\tstring\tIcono utilizado al comienzo del breadcrumb\t\"home\"\tcaretIconName\tstring\tIcono utilizado a la izquierda de cada elemento del breadcrumb\t\"arrowRight\"\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","especificaciones#Especificaciones":"Aunque el breadcrumb es un historial de filtros, no todos los filtros aplicados se mostrarán como un elemento dentro de la lista. Solo se renderizarán los filtros con una de las siguientes keys:\ndepartment\ncategory\nsubcategory\nEl componente se basa en el array selectedFacets del ProductListPageProvider, que contiene una lista de todos los filtros aplicados. De esta lista, seleccionará solo aquellos que tengan una de las keys mencionadas anteriormente.Una vez seleccionados los elementos que formarán el SearchBreadCrumb, se ordenarán automáticamente manteniendo una jerarquía similar al árbol de categorías, donde los elementos department se colocarán al principio de la lista, mientras que los elementos subcategory se colocarán al final.\nSi hay múltiples elementos de un tipo, la posición en el breadcrumb dependerá de cuál fue agregado primero a la lista de filtros.","personalización#Personalización":"Para aplicar personalización de estilos al componente SearchBreadCrumb, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tsearchBreadCrumbListContainer\tsearchBreadCrumbHomeIcon\tsearchBreadCrumbItem\tsearchBreadCrumbLabel"}},"/itg-mobile-framework/components/Search/SearchContent":{"title":"SearchContent","data":{"":"El componente SearchContent es responsable de renderizar el listado de productos de una PLP.","configuración#Configuración":"El componente SearchContent puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tnumColumns\tnumber\tNúmero de columnas en las que se mostrarán los productos\t2\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-\t\nEste componente recibe propiedades que se transmiten a su(s) componente(s) hijo(s). Para ver todas las opciones de personalización, consulta la documentación de dichos componentes:\nProductSummary","personalización#Personalización":"Para aplicar personalización de estilos al componente SearchContent, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tsearchContentContainer\tsearchContentColumnWrapper\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nProductSummary"}},"/itg-mobile-framework/components/Profile/Profile":{"title":"Profile","data":{"":"El componente Profile contiene un menú con enlaces a la información del usuario, como sus datos personales, historial de pedidos, direcciones guardadas y opciones de configuración personalizables.","configuración#Configuración":"El componente Profile puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tmenuOptions\tArray<MenuOption>\tUn array de objetos. Cada objeto contiene las opciones que se muestran en el menu\t-\tunloggedText\tstring\tTexto que se muestra en la pantalla cuando el usuario no ha iniciado sesióon\tInicia sesión para tener una mejor experiencia personalizada.\tclassName\tstring\tNombre de la clase CSS para aplicar estilos personalizados al componente\t-","menuoption#MenuOption":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tname\tstring\tNombre de cada opción mostrada\t-\tlink\tLink\tObjeto que define la url de la ruta a donde redirige cada opción\t-\ttype\tstring\tIndica el tipo de cada opcion si es primary o secondary, lo cual determina el orden de cada opción el menu\t-\ticon\tstring\tIcon asociado con cada opción del menu\t-","link#Link":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\turl\tstring\tURL de la ruta asociada a cada opcióon\t-\texternal\tboolean\tIndica si la URL redirige a un enlace externo a la aplicación\tfalse","especificaciones#Especificaciones":"Tenga en cuenta lo siguiente al utilizar el componente Profile:\nEl comportamiento del componente varía dependiendo de si el usuario ha iniciado sesión. Cuando se inicia sesión, se muestra un mensaje de bienvenida junto con las opciones de menú definidas y un botón de cierre de sesión. Si el usuario no ha iniciado sesión, aparece un texto junto con las opciones de menú secundarias (si las hay), que hacen referencia a páginas no transaccionales, como información adicional o términos y condiciones, etc. Además, hay un botón que redirecciona a la pantalla de inicio de sesión para que el usuario inicie sesión.\nSi no se proporcionan opciones en el menú, el componente mostrará las opciones predeterminadas. Estas opciones predeterminadas incluyen: \"Mi cuenta\", \"Mis direcciones\" y \"Mis pedidos\".\nSi desea personalizar el contenedor para una opción de menú específica, utilice la clase profileOptionContainerPrimary u profileOptionContainerSecondary seguida de un número, que indica la posición de la opción que desea personalizar en el menú. Ejemplo: profileOptionContainerPrimary1","personalización#Personalización":"Para aplicar personalización de estilos al componente Profile, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tprofileContainer\tprofileTitle\tprofileLogoutButtonContainer\tprofileLogoutButton\tprofileLogoutButtonText\tprofileUnloggedText\tprofileLoginButton\tprofileLoginButtonText\tprofileMenuPrimaryOptions\tprofileMenuSecondaryOptions\tprofileOptionContainer\tprofileOptionContainerPrimary\tprofileOptionContainerSecondary\tprofileOptionIconAndName\tprofileOptionIconContainer\tprofileOptionIcon\tprofileOptionName\tprofileArrowIconContainer\tprofileArrowIcon"}},"/itg-mobile-framework/components/Search/SearchInfo":{"title":"Search Info","data":{"":"El componente SearchInfo muestra el término utilizado para la búsqueda actual.","configuration#Configuration":"El componente SearchInfo puede ser configurado con las siguientes propiedades:","props#Props":"Prop name\tType\tDescription\tDefault value\tfullText\tstring\tEl término de búsqueda ingresado por el usuario. Si fullText no existe al llegar a la página de búsqueda de productos, este componente no se renderizará.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","modus-operandi#Modus Operandi":"El componente SearchInfo no se mostrará si no hay un término de búsqueda. Esto puede ocurrir, por ejemplo, si el usuario es redirigido a la página de listado de productos a través de un enlace desde el componente ProductList, que generalmente contiene ids de colección utilizados para buscar los productos a mostrar.","customization#Customization":"Para aplicar personalización de estilos al componente SearchInfo, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tType of Style\tsearchInfoContainer\tViewStyle\tsearchInfoLabel\tTextStyle"}},"/itg-mobile-framework/components/Search/SearchOrderBy":{"title":"SearchOrderBy","data":{"":"El componente SearchOrderBy es un botón de ordenamientos para utilizar en la PLP. Al interactuar con el botón, se despliega un modal el cual contiene opciones de ordenamiento de productos.","configuración#Configuración":"El componente SearchOrderBy puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tbuttonText\tstring\tTexto que se muestra en el botón\t-\torderOptions\torderOption[]\tOpciones de ordenamiento que aparecerán en el modal\t-\tcloseModalIconName\tstring\tNombre del icono para cerrar el modal\t-\tmodalTitel\tstring\tTítulo del modal de ordenamientos\t-\tdefaultSelectedOrder\tstring\tOrdenamiento seleccionado por defecto\t-\tactiveIconName\tstring\tIcono que acompaña la opción de ordenamiento cuando está activa\t-\tinactiveIconName\tstring\tIcono que acompaña la opción de ordenamiento cuando está inactiva\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","orderoption#orderOption":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tlabel\tstring\tEtiqueta que se muestra para la opción\t-\tvalue\tstring\tValor que representa la opción de orden, utilizado en la consulta para ordenar los productos\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente SearchOrderBy, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tsearchOrderByButton\tsearchOrderByButtonText\tsearchOrderByOptionsContainer\tsearchOrderByOrderOptionsContainer\tsearchOrderByModalTitle\tsearchOrderByOrderOptionsCloseButton\tsearchOrderByOrderOptionsButtonIcon\tsearchOrderByOrderOptionContainer\tsearchOrderByOrderOptionLabel\tsearchOrderByOrderOptionContainerSelected\tsearchOrderByOrderOptionLabelSelected\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nModalCustom"}},"/itg-mobile-framework/components/ShippingData/DeliveryMethod":{"title":"DeliveryMethod","data":{"":"El componente DeliveryMethod permite gestionar de manera eficiente las direcciones asociadas al usuario, proporcionando una interfaz intuitiva para realizar las siguientes operaciones:\nAgregar una nueva dirección.\nVisualizar las direcciones que han sido creadas.\nEditar datos de las direcciones existentes.\nEliminar las direcciones que ya no son necesarias.","configuración#Configuración":"El componente DeliveryMethod puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","especificaciones#Especificaciones":"El componente DeliveryMethod esta compuesto de cuatro componentes principales:\nTitle:\nUn componente dinámico que cambia de acuerdo a la vista donde se encuntre el usuario (Lista o formulario).\nAddressList:\nUn componente que muestra la lista de direcciones creadas por el usuario. Desde aqui se puede seleccionar, editar o eliminar una dirección.\nAddressForm:\nUn componenete que muestra un formulario donde el usuario puede seleccionar: departamneto, ciudad y dirección. Desde aqui se puede crear una dirección.\nAddressButton:\nUn componente dinámico que cambia el texto y la ccion ejecutada de acuerdo a la vista donde se encuntre el usuario (Lista o formulario).\nLas direcciones creadas desde el componente DeliveryMethod se almacenan en el 'orderForm' mientras se encuentre activa la sesión de usuario y solo se agregan al perfil de usuario aquellas direcciones con las que se haya finalizado un flujo de compra.","personalización#Personalización":"Para aplicar personalización de estilos al componente DeliveryMethod, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tdeliveryMethodContainer\tdeliveryMethodTitleContainer\tdeliveryMethodIconGoBackContainer\tdeliveryMethodIconGoBack\tdeliveryMethodTitleText\tdeliveryMethodAddressListContainer\tdeliveryMethodAddressListContent\tdeliveryMethodIconLocationContainer\tdeliveryMethodIconLocation\tdeliveryMethodAddressListEmptyText\tdeliveryMethodAddressDataContainer\tdeliveryMethodAddressDataTitle\tdeliveryMethodAddressDataSubtitle\tdeliveryMethodAddressActionsContainer\tdeliveryMethodIconDeleteContainer\tdeliveryMethodIconDelete\tdeliveryMethodIconEditContainer\tdeliveryMethodIconEdit\tdeliveryMethodAddressButton\tdeliveryMethodAddressButtonText\tdeliveryMethodAddressFormContainer\tdeliveryMethodAddressForm\tdeliveryMethodAddressFormInput"}},"/itg-mobile-framework/components/ShippingData/ListItem":{"title":"ListItem","data":{"":"El componente ListItem permite alinear componentes en forma de lista, ofreciendo opciones para agregar elementos a la izquierda, al centro y a la derecha. Dependiendo del tipo configurado, el componente puede comportarse como un contenedor simple, un botón con acción de selección, o un botón que redirige a un enlace.","configuración#Configuración":"El componente ListItem puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tid\tstring\tIdentificador opcional para el componente\t-\ttype\tstring\tDefine el tipo de ListItem: 'container' para un contenedor sin acción, 'button-select' para un botón con acción de selección, o 'button-link' para un botón que redirige a un enlace\t-\titemActiveId\tstring\tID del elemento actualmente activo. Se utiliza para aplicar estilos específicos cuando el componente es de tipo 'button-select'\t-\tonPress\tfunction\tFunción que se ejecuta al presionar el componente cuando es de tipo 'button-select' o 'button-link'\t-\tleftComponent\tReact.JSX.Element\tComponente que se renderiza en el lado izquierdo del componente\t-\tcenterComponent\tReact.JSX.Element\tComponente que se renderiza en el centro del componente\t-\trightComponent\tReact.JSX.Element\tComponente que se renderiza en el lado derecho del componente\t-","especificaciones#Especificaciones":"El componente ListItem ofrece tres comportamientos diferentes según el valor de la propiedad type:\nContainer (type='container'):\nUn contenedor simple que no tiene ninguna acción asociada. Utiliza un <View> para alinear los componentes configurados.\nButton Select (type='button-select'):\nUn botón con acción de selección. Cuando se presiona, ejecuta la función onPress. Aplica estilos específicos si el id del elemento coincide con el itemActiveId.\nButton Link (type='button-link'):\nUn botón que redirige a un enlace. Al presionarlo, ejecuta la función onPress.\nSi bien el componente ListItem puede usarse directamente en la aplicación como un bloque con el modo container, su uso más común es dentro de otros componentes en la aplicación que requieran listar elementos. Un ejemplo de esto es su uso dentro de componentes que listan direcciones, donde el ListItem puede representar cada dirección en la lista.","personalización#Personalización":"Para aplicar personalización de estilos al componente ListItem, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tlistItemDefaultItem\tlistItemActiveItem"}},"/itg-mobile-framework/components/ShippingData/ShippingOptions":{"title":"Shipping Options","data":{"":"El componente ShippingOptions es un componente reutilizable que muestra una lista de opciones de envío. Permite al usuario seleccionar una opción de envío y ser redirigido a la página correspondiente. Actúa como un menú secundario para navegar entre rutas relacionadas entre sí.","configuración#Configuración":"The following table shows the interface of the component, i.e. the properties through which you can control its appearance and behavior.","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\toptions\tShippingOptionsItem[]\tUn arreglo de objetos, donde cada objeto es un opcion de envio\t[]\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","shippingoptionsitem#ShippingOptionsItem":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttext\tstring\tEl texto que sera mostrado es cada opción de envio\t-\tlink\tstring\tEl enlace a la ruta donde se realiza la redirección cuando se presiona el botón\t-","especificaciones#Especificaciones":"Cuando se configuran las rutas asociadas a cada opción de envio, dentro del CMS, la interfaz del componenete principal debe ir acompañada de la interfaz del componente ShippingOptions, lo anterior debido a que un componenete de navegacion común entre las rutas.","personalización#Personalización":"Para aplicar personalización de estilos al componente ShippingOptions, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tshippingOptionsContainer\tshippingOptionsItem\tshippingOptionsItemActive\tshippingOptionsItemText\tshippingOptionsItemTextActive"}},"/itg-mobile-framework/components/TabBar/TabBar":{"title":"TabBar","data":{"":"El componente TabBar es uno de los métodos más comunes de navegación en aplicaciones. Consiste de un listado de tabs de navegación.","configuration#Configuration":"El componente TabBar puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por Defecto\ttabs\tTabItemProps[]\tArreglo de objetos que define las propiedades de cada pestaña. Consulta la tabla de TabItemProps.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t''","tabitemprops#TabItemProps":"Cada objeto del arreglo tabs debe seguir la estructura de TabItemProps, con las siguientes propiedades:\nNombre de la propiedad\tTipo\tDescripción\tValor por Defecto\tpath\tstring\tRuta de navegación asociada a la pestaña.\t-\tlabel\tstring\tTexto que aparece en la pestaña.\t-\ticon\tstring\tNombre del ícono que aparecerá en la pestaña.\t-\tactiveTintColor\tstring\tColor del texto cuando la pestaña está activa.\t-\tinactiveTintColor\tstring\tColor del texto cuando la pestaña está inactiva.\t-\tactiveBackgroundColor\tstring\tColor de fondo de la pestaña cuando está activa.\t-\tinactiveBackgroundColor\tstring\tColor de fondo de la pestaña cuando está inactiva.\t-\tcustomFunction\tfunction\tFunción personalizada que se ejecuta al hacer clic en la pestaña, en lugar de navegar a la ruta especificada.\t-\tCustomComponent\tReact.FC\tComponente personalizado que se renderiza en lugar de la pestaña, ignorando el resto de propiedades.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente TabBar, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nClases CSS\ttabContainer\t\nEste componente combina clases de diferentes componentes. Abajo encontrarás enlaces a la documentación de los subcomponentes utilizados y más detalles de sus hojas de estilo.\nTabItem"}},"/itg-mobile-framework/components/TabBar/TabItem":{"title":"TabItem","data":{"":"El componente TabItem representa una pestaña individual dentro de una barra de navegación, diseñada para su uso dentro del componente TabBar.","configuration#Configuration":"El componente TabItem puede ser configurado con las siguientes propiedades:\nNombre de la propiedad\tTipo\tDescripción\tValor por Defecto\tpath\tstring\tRuta de navegación asociada a la pestaña.\t-\tlabel\tstring\tTexto que aparece en la pestaña.\t-\ticon\tstring\tNombre del ícono que aparecerá en la pestaña.\t-\tactiveTintColor\tstring\tColor del texto cuando la pestaña está activa.\t-\tinactiveTintColor\tstring\tColor del texto cuando la pestaña está inactiva.\t-\tactiveBackgroundColor\tstring\tColor de fondo de la pestaña cuando está activa.\t-\tinactiveBackgroundColor\tstring\tColor de fondo de la pestaña cuando está inactiva.\t-\tcustomFunction\tfunction\tFunción personalizada que se ejecuta al hacer clic en la pestaña, en lugar de navegar a la ruta especificada.\t-\tCustomComponent\tReact.FC\tComponente personalizado que se renderiza en lugar de la pestaña, ignorando el resto de propiedades.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente TabItem, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nCSS Handles\ttabItemContainer\ttabItemLabel\ttabItemIcon","modus-operandi#Modus Operandi":"El componente TabItem es flexible en su comportamiento mediante las siguientes propiedades:\ncustomFunction: Si se proporciona, esta función se ejecutará cuando se haga clic en la pestaña, reemplazando la funcionalidad de navegación por defecto asociada a la propiedad path.\nCustomComponent: Si esta propiedad se proporciona, el componente personalizado será renderizado en lugar del contenido estándar de la pestaña, ignorando todas las demás propiedades, incluyendo customFunction."}},"/itg-mobile-framework/components/Search/SearchProductCount":{"title":"SearchProductCount","data":{"":"El componente ProductCount muestra el número de coincidencias encontradas para la búsqueda actual. Se actualizará si el término de búsqueda cambia o se aplican nuevos filtros.","configuration#Configuration":"El componente ProductCount puede ser configurado con las siguientes propiedades:","props#Props":"Prop name\tType\tDescription\tDefault value\tcountLabel\tstring\tTexto que aparece junto al número de productos\t\"Productos\"\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ProductCount, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyles Handles\tproductCountContainer\tproductCountLabel"}},"/itg-mobile-framework/components/UpdateVersionModal":{"title":"UpdateVersionModal","data":{"":"El componente UpdateVersionModal es una herramienta versátil que solicita a los usuarios actualizar la versión de su aplicación cuando hay una nueva disponible. Este modal bloquea al usuario de realizar cualquier acción dentro de la app hasta que la actualización se complete.Este es el comportamiento predeterminado del componente. Sin embargo, también se puede activar manualmente para bloquear a los usuarios, por ejemplo, durante mantenimientos críticos. El texto, la descripción y la imagen del modal se pueden personalizar.","configuración#Configuración":"El componente UpdateVersionModal puede configurarse con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\timageUri\tstring\tURL de la imagen\t-\ttitle\tstring\tTexto del título\t¡Actualización disponible!\tdescription\tstring\tTexto de la descripción\tActualiza ahora para acceder a nuevas funcionalidades y mejoras.\tforceModalActivation\tboolean\tSi es true, el modal se activará manualmente para bloquear a los usuarios\tfalse\tdisableAutoUpdateCheck\tboolean\tSi es true, la verificación automática de actualizaciones se desactivará\tfalse\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","especificaciones#Especificaciones":"El componente UpdateVersionModal opera verificando la versión actual de la aplicación contra la versión desplegada. Si la versión desplegada es superior, el modal se muestra al usuario, bloqueando cualquier acción hasta que la aplicación sea actualizada. Esto garantiza que los usuarios siempre tengan la última versión, beneficiándose de nuevas funcionalidades y correcciones.El componente también se puede forzar para mostrar el modal manualmente en caso de necesidades de mantenimiento urgente.\nIMPORTANTE: La funcionalidad de detección automática de versiones aún no ha sido 100% verificada para funcionar sin problemas. Se requieren algunas configuraciones y pruebas adicionales para confirmar su funcionamiento completo.","personalización#Personalización":"Para aplicar personalización de estilos al componente UpdateVersionModal, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tupdateVersionModalContent\tupdateVersionModalImage\tupdateVersionModalTitle\tupdateVersionModalDescription\tupdateVersionModalButton\tupdateVersionModalButtonText"}},"/itg-mobile-framework/components/Welcome/ImageBackground":{"title":"Image Background","data":{"":"El componente ImageBackground es un componente versátil que te permite mostrar una imagen de fondo al inicio de tu aplicación o en cualquier otra ruta.","configuración#Configuración":"El componente ImageBackground puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\timage\tstring\tURL de la imagen.\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente.\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente ImageBackground, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de Estilos\tDescripción\timageBackgroundContainer\tContenedor de la Imagen.\timageBackgroundContent\tEstilos especificos de la imagen.\timageBackgroundWarningContainer\tContenedor para cuando no se provee una URL de imagen."}},"/itg-mobile-framework/core-set-up/cms-plugin":{"title":"CMS","data":{"":"Esta pagina te dará una explicación completa de la integración entre CORE y CMS.","aprenderás#Aprenderás":"Porqué necesitas un CMS\nQué contenidos se gestionan desde un CMS\nCómo desarrollar para un CMS\nCómo configurar tu CMS","tu-app-en-bloques#Tu App en bloques":"Las aplicaciones desarrolladas con CORE tienen una fuerte inclinación a trabajar con sistemas de gestión de contenidos para definir la estructura tanto de rutas como de componentes.Al trabajar estrechamente con un CMS puedes pensar tu aplicación como un conjunto de pequeños bloques que puedes usar para construir lo que necesites. Así, podrás quitar y poner componentes, o incluso crear y borrar secciones completas de la aplicación según requieras.Desarrollar tu aplicación de esta forma te ofrecerá grandes ventajas:\nLas modificaciones de bloques, rutas o componetes, que hagas se darán en tiempo real\nNo deberás compilar o desplegar nuevamente tus aplicaciones\nPodrás usar tus componentes según necesites en diferentes partes de la aplicación","qué-administra-tu-cms#Qué administra Tu CMS":"El CMS estará encargado de dar la estrucutra de tu aplicación, lo que incluye qué rutas tendrá y que componentes conformará cada una de esas rutas.El alcance de tu CMS no termina allí, pues podrás configurar cómo se ven o se comportan diferetes componentes. En un componente slider de imagenes, podrás definir qué imagenes mostrar, pero también podrás personalizar su comportamiento como cuantas imagenes mostrar o si tiene autoplay.Veamos un ejemplo. Tienes una ruta llamada Welcome que es el punto de entrada de tu aplicación. Aquí deseas mostrar una imagen de fondo, acompañada de un componente que permita al usuario registrarse o autenticarse para entrar a una tienda. Lo que acabamos de describir podría verse así desde tu CMS:Como ves, no solo se define la estructura de los componentes, sino también detalles o propiedades de los mismos, como los textos que tiene en su interior.","desarrolla-tus-componentes-para-un-cms#Desarrolla tus componentes para un CMS":"Al momento de crear componentes, desarrollalos para que puedan ser usados y administrados desde un CMS, habilitando las opciones necesarias para que pueda ser personalizado por fuera del código.","qué-tan-personalizable-debe-ser-mi-componente#¿Qué tan personalizable debe ser mi componente?":"🚧 sección aún en construcciónwelcome-component es uno de los componentes de Welcome y te ayudará a responder esta pregunta. Este componente pinta un titulo, un subtitulo y dos botones. La interfaz minima necesaria para que este componente sea personalizable debe incluir esos mismos elementos: un titulo, un subtitulo y dos botones que también incluirán el texto al interior del botón y su enlace de redirección.Al listado de opciones de personalización podriamos añadir muchos mas elementos como: que tan redondeado es el borde del contenedor, color y fuente de titulos y subtitulos, color de fondo de los botones y más.Si bien el nivel de pesonalización de tus componentes puede ser muy alto e incluir todas las opciones que acabamos de mencionar, es bueno que te preguntes ¿Cuales son las propiedades que necesita mi componente para funcionar? en el caso de welcome-componente los botones y sus enlaces de redirección son la parte más importante, seguido de titulo y subtitulo.","cómo-configurar-tu-cms#Cómo configurar tu CMS":"CORE está usando VTEX Headless CMS. Esto no significa que este ligado a este CMS, CORE fue pensado para tener la libertad de conectarse al CMS que requiera tu aplicación. Pero ten presente que una parte de la configuración que verás a continuación está planteada para este CMS.\nLa conexión a otros CMS deberá pasar por el desarrollo de un plugin que permita conectarse a esos CMS.","configuración-de-fetch-con-cms-plugin#Configuración de fetch con CMS-Plugin":"La configuración para conectarte a tu CMS se establece en el siguiente plugin. En el podrás configurar todo lo relacionado a conexión y petición de información a tu CMS.\nconst plugins = [\n  //... otros plugins\n  {\n    resolve: `itg-cms-plugin`,\n    options: {\n      provider: `vtex`,\n      variables: {\n        accountName: `itglobers`,\n        workspace: `app`,\n        builderId: `app`,\n        contentType: `page`,\n      },\n    },\n  },\n  //... otros plugins\n]","resolve#resolve":"Es el plugin de CMS que se usará. CORE se integra itg-cms-plugin. Resolve no deberá confundirse con el proveedor de CMS a usar.","options#options":"Propiedad\tTipo\tDescripción\tprovider\tstring\tProveedor de CMS a usar\tvariables\tVariables\tVariables\tretryOptions\tretryOption\tOpciones de reintento\tfetchOptions\tfetchOptions\tOpciones de fetch","variables#Variables":"Las variables te permiten configurar la URL para la petición a tu CMS. Para VTEX Headless CMS, por ejemplo, necesitarás variables para definir el accountName o workspace.\nPropiedad\tTipo\tDescripción\tkey\tstring\tClave de la variable\tvalue\tstring\tValor de la variable","retryoptions#retryOptions":"El objeto retryOptions te permite definir la cantidad de reintentos de conexión en caso de que la conexión al CMS falle. Estas opciones pueden serte de utilidad si tu servidor se desactiva tras un periodo de inactividad.\nPropiedad\tTipo\tDescripción\tmaxRetries\tnumber\tNúmero máximo de reintentos\tretryDelay\tnumber\tRetardo entre reintentos (ms)","fetchoptions#fetchOptions":"El objeto fetchOptions contiene configuraciones que permiten personalizar tu solicitud. Para ver todas las opciones disponibles de configuración revisa la propiedad init del método fetch.\nPropiedad\tTipo\tDescripción\tkey\tstring\tClave de la opción de fetch\tvalue\tstring o Record<string, string>\tValor de la opción de fetch","configuración-de-rutas-con-itg-ecommerce-plugin#Configuración de rutas con ITG-ECOMMERCE Plugin":"Si deseas configurar opciones relacionadas con las rutas de tu aplicación podrás hacerlo con itg-ecommerce-plugin.Ya que CMS también maneja las rutas de tu aplicación, si deseas configurar algo relacionado con las rutas debes ir al e-commerce plugin. en la sección routesConfig\nconst plugins = [\n  //... otros plugins\n  {\n    resolve: `itg-ecommerce-plugin`,\n    options: {\n      //... opciones\n    },\n    routesConfig: {\n      initialRouteName: {\n        loggedIn: 'Home',\n        loggedOut: 'Welcome',\n      },\n      prefixes : []\n      routes: [\n        {\n          name: 'Welcome',\n          options: {\n            headerShown: false,\n            showTabNavigator: false,\n            loggedIn: false,\n          },\n        },\n        {\n          name: 'Login',\n          options: {\n            headerShown: false,\n            showTabNavigator: false,\n            loggedIn: false,\n          },\n        },\n        {\n          name: 'Checkout',\n          options: {\n            headerShown: false,\n            useDefaultLayout: false,\n            showTabNavigator: false,\n          },\n        },\n        {\n          name: 'Profile',\n          options: {\n            useDefaultLayout: false,\n          },\n        },\n      ],\n    },\n  },\n  //... otros plugins\n]","routesconfig#routesConfig":"routesConfig es un objeto que te permitirá personalizar diferentes opciones de tus rutas, definir ruta inicial y más.\nPropiedad\tTipo\tDescripción\tinitialRouteName\tInitialRouteName\tNombre de la ruta inicial\troutes\troutes\tArreglo de rutas","initialroutename#InitialRouteName":"Permite definir cual es la ruta inicial de tu aplicación, dependiendo del estado los estados loggedIn o loggedOut.\nPropiedad\tTipo\tDescripción\tloggedIn\tstring\tRuta inicial para usuarios logueados\tloggedOut\tstring\tRuta inicial para usuarios no logueados","prefixes#Prefixes":"Prefijos de URL que la aplicación utiliza para manejar deep links y rutas específicas. Para conocer más del funcionamiento de prefix revisa Deep Links con React Native Navigation","routes#Routes":"Listado de rutas de tu aplicación.\nEste listado no debe contener todas las rutas de tu aplicación, sino aquellas a las que desees cambiar alguna de sus Options.\nPropiedad\tTipo\tDescripción\tname\tstring\tNombre de la ruta\toptions\tOptions\tOpciones de la ruta","options-1#Options":"Propiedad\tTipo\tDescripción\tValor por defecto\theaderShown\tboolean\tIndica si se muestra el componente Header\ttrue\tshowTabNavigator\tboolean\tIndica si se muestra el componente TabNavigator\ttrue\tloggedIn\tboolean\tIndica si la ruta está disponible para usuarios logueados\ttrue\tuseDefaultLayout\tboolean\tIndica si se usa el Layout por defecto\ttrue\t\nheaderShown y showTabNavigator hacen referencia a los componentes de e-commerce-plugin o tus componentes header y tabBar en caso de que los hayas customizado. No hacen referencia a los componentes por defecto de la librería React Navigation.\nuseDefaultLayout te permite desactivar el layout por defecto. Este layout consiste de un ScrollView y un SafeAreaView que envuelven los componentes que hayas definido para esa ruta. Puedes considerar desactivarlos en el caso de que alguno de los componentes que hayas definidio de dicha ruta incluya un ScrollView o una FlatList en sentido vertical, lo que rompe con las reglas de react native y causa errores que afectan el rendimiento normal de tu aplicación."}},"/itg-mobile-framework/core-set-up/e-commerce-plugin":{"title":"E-COMMERCE","data":{"":"Al iniciar tu proyecto desde la plantilla que creaste en configuracion de ambiente, encontrarás una aplicación de comercio electrónico completamente funcional. Esta aplicación incluye todos los flujos comunes para un e-commerce que use la plataforma VTEX. Esta aplicación está construida en su totalidad con itg-ecommerce-plugin.itg-ecommerce-plugin es una biblioteca de componentes, contextos y funciones, listos para usar. Esta biblioteca te ofrece desde componentes minimos como rich-text o icons, pasando por componentes de complejidad media como sliders o menu hasta un nivel de secciones complejas que trabajan en conjunto para un proposito particular, como todos los componentes que conformar una PDP (Página de Detalles del Producto). De este modo, esta biblioteca sigue una estructura similar al diseño atómico.","casos-de-uso#Casos de uso":"Además de brindarte una solución para tener una aplicación completamente construida, puedes beneficiarte de e-commerce en algunos casos como","personalización-de-componentes#Personalización de componentes":"Todos los componentes de la plantilla de tu aplicación tienen cierto nivel de personalización. Esta personalización podrás hacerla a traves de tu CMS usando las interfaces de los componentes o mediante el uso de clases de estilos para personalizar los estilos de tu aplicación.","funciones#Funciones":"Si creas un componente Custom y este debe hacer una solicitud de datos al servidor, tienes también un listado de funciones que te permitirán utilizar diferentes servicios.Por ejemplo, si debes desarrollar un menú de categorías con alguna funcionalidad muy particular. Existe una función que te permite consultar el servicio del menú de categorías para que dispongas de esa información de inmediato y te centres en lo más relevante del desarrollo de tu nuevo componente.","contextos#Contextos":"En algunos casos, los componentes custom que crearás no serán componentes aislados, sino que harán parte de alguna sección de tu aplicación, como una PDP.Para este tipo de desarrollos, no hará falta que uses, por ejemplo, una función para consultar los detalles de un producto ya que todos los datos relacionados a esa consulta ya han sido solicitados y están disponibles en un contexto. Podrás suscribirte a ese contexto para consultar la información que existe en él o incluso enviar acciones para actualizarlo.Podrás encontrar todos los contextos disponibles en contextos.","configuración-de-e-commerce#Configuración de E-COMMERCE":"La configuración por defecto de tu itg-ecommerce-plugin es la siguiente:\nPropiedad\tTipo\tDescripción\tresolve\tstring\tNombre del plugin\toptions\toptions\tOpciones del plugin\t\nconst plugins = [\n  //...otros plugins\n  {\n    resolve: `itg-ecommerce-plugin`,\n    options: {\n      provider: `vtex`,\n      account: `itglobers`,\n      workspace: `master`,\n      culture: {\n        country: 'COL',\n        currency: 'COP',\n        customCurrencyDecimalDigits: 0,\n        customCurrencySymbol: '$',\n        language: 'es',\n        locale: 'es-CO',\n      },\n      routesConfig: {\n        //... configuración de rutas\n      },\n    },\n  },\n]","options#Options":"Las siguientes propiedades de configuración son especificas para conectarse\ncon VTEX, debido a que este es el único provider disponible hasta el momento.\nPropiedad\tTipo\tDescripción\tprovider\tstring\tProveedor de e-commerce a utilizar\taccount\tstring\tCuenta\tworkspace\tstring\tEspacio de trabajo\tculture\tculture\tInformación cultural y monetaria\t\nEl provider que usa el template de tu aplicación es vtex. Para este proveedor, los valores account y provider son usados de forma constante para construir la URL de las peticiones de tus componentes de la siguiente forma\nconst response = await fetcher(\n  `https://${account}.myvtex.com/_v/public/graphql/v1?workspace=${workspace}`,\n  {\n    method: 'POST',\n    body,\n  }\n)\nSi deseas apuntar a otra account o workspace este es el espacio para realizar ese cambio.","culture#Culture":"Propiedad\tTipo\tDescripción\tcountry\tstring\tPaís\tcurrency\tstring\tMoneda\tcustomCurrencyDecimalDigits\tnumber\tDígitos decimales personalizados\tcustomCurrencySymbol\tstring\tSímbolo de moneda personalizado\tlanguage\tstring\tIdioma\tlocale\tstring\tConfiguración regional"}},"/itg-mobile-framework/core-set-up/plugins":{"title":"Configuración de Plugins","data":{"":"Un plugin es una extensión modular que añade funcionalidades específicas a una aplicación sin alterar el núcleo de la misma. Antes de usarla en tu aplicación deberás configurarla para que funcione correctamente con CORE.Aprenderás\nTipos de Plugin\nCómo configurar Plugins para toda tu aplicación\nCómo configurar Plugins para rutas especificas de tu aplicación","tipos-de-plugins#Tipos de plugins":"Una vez hayas desarrollado un plugin para tu aplicación, podrás definir si sus contextos estarán disponibles para toda la aplicación o solo para rutas especificas. Por ejemplo, si tu aplicación usa un sistmea de puntos que se usa en toda la aplicación, convertir tu contexto en global para la aplicación es la mejor alternativa, ya que le permitirá a todos los componentes acceder a la información que almacene. Ahora, si estás desarrollando una pagina de detalle de producto, quizá quieras limitar el contexto de información del producto solo a una ruta ya que no será usado por componentes por fuera de esa ruta.","consideración-del-tipo-de-plugin#Consideración del tipo de plugin":"Los plugins para rutas especificas están limitados a usarse en una sola ruta. Si deseas usar un plugin, por ejemplo, solo en dos rutas deberás convertirlo en global a pesar de que no se vaya a usar en toda la aplicación.Este comportamiento surge de la forma en que CORE construye aplicaciones. Una vez tu aplicación se conecta a tu CMS obtendrá un Array de rutas, sobre el que se iterará para construir la navegación y el contenido de las mismas. Ya que es una iteración, cada ruta se construye de forma independiente a las demás.Si tu aplicación tiene 2 rutas, que deseas envolver en un MyPlugin, el resultado final de la construccion de rutas se vería así\n<Stack.Screen name='ruta-uno'>\n    <MyPlugin>\n        <SomeComponents />\n    </MyPlugin>\n</Stack.Screen>\n<Stack.Screen name='ruta-dos'>\n    <MyPlugin>\n        <SomeComponents />\n    </MyPlugin>\n</Stack.Screen>\nSi bien los componentes de ambas rutas están envueltos en MyPlugin, se trata en realidad de dos contextos separados. Tal como indica React, “si renderizamos un mismo componente, uno al lado del otro, cada uno de ellos obtendrá sus propios e independientes estados”.","añadir-plugins-a-tu-proyecto#Añadir Plugins a tu proyecto":"En el repositorio de tu proyecto existe una carpeta llamada plugins con la siguiente estructura de archivos","globalplugins#GlobalPlugins":"Encontrarás un arreglo de objetos. El orden de los plugins en el arreglo refleja el orden que mantendrán al momento de crear el arbol de contextos. Dado el siguiente arreglo de providers\nconst globalPlugins: GlobalProviderConfig[] = [\n  {\n    provider: ConfigProvider,\n    props: { data: { config } },\n  },\n  {\n    provider: OrderFormProvider,\n    props: {},\n  },\n  {\n    provider: GlobalStylesProvider,\n    props: { data: GlobalStyles },\n  },\n]\nel arbol de contextos resultante es\n<ConfigProvider>\n  <OrderFormProvider>\n    <GlobalStylesProvider>\n      <App />\n    </GlobalStylesProvider>\n  </OrderFormProvider>\n</ConfigProvider>\nCada Plugin se representa a traves de un objeto con dos propiedades","provider#provider":"Será el componente provider","props#props":"Serán las props que tu provider. Puedes pasar aquí estados por defecto o funciones que sean necesarias para el funcionamiento de tu provider. Si no las necesita será un objeto vacio.","routeplugins#RoutePlugins":"Es un objeto, en el que la llave representará la ruta a la que deseas asignar el plugin. El nombre de tu ruta deberá coincidir tanto en este archivo como en tu CMS. El valor, consistirá de","provider-1#provider":"Será el componente provider","props-1#props":"Serán las props que tu provider. Puedes pasar aquí estados por defecto o funciones que sean necesarias para el funcionamiento de tu provider. Si no las necesita será un objeto vacio."}},"/itg-mobile-framework/core-set-up/what-is-core":{"title":"¿Qué es Core?","data":{"core-un-vistazo-interno#CORE: Un vistazo interno":"Si bien para ti CORE puede sentirse como una caja negra en este momento, en las siguientes secciones lograrás comprender su funcionamiento y cómo sacarle el máximo provecho posible.Antes de continuar, debes entender que CORE es en realidad un conjunto de librerías, que trabajan en conjunto para facilitar el proceso de desarrollo. En cada una de las siguientes secciones aprenderás los conceptos más relevantes de cada librería y cómo configurarlas.\nTodas sus configuraciones las harás integrando plugins al archivo plugins.config.js ubicado en la raíz de tu proyecto."}},"/itg-mobile-framework/implementation/00-Previous_requirements":{"title":"Requisitos previos","data":{"":"Antes de comenzar a desarrollar la aplicación de comercio electrónico utilizando ITG Mobile Framework y React Native, asegúrate de tener instalados los siguientes requisitos previos:","nodejs-y-yarn#Node.js y yarn":"Node.js es un entorno de ejecución para JavaScript construido sobre el motor V8 de Chrome. yarn es un administrador de paquetes de Node.js que facilita la instalación y gestión de paquetes de JavaScript.Versión recomendada: Se recomienda utilizar la última versión estable de Node.js y yarn. Puedes verificar la última versión en el sitio web oficial de Node.js.Instalación: Descarga e instala Node.js y yarn desde el sitio web oficial.","editor-de-código#Editor de código":"Es esencial contar con un editor de código adecuado para desarrollar aplicaciones de React Native. Visual Studio Code es una opción popular y ampliamente utilizado por la comunidad de desarrollo.","visual-studio-code#Visual Studio Code":"Versión recomendada: Utiliza la última versión estable de Visual Studio Code.Extensiones recomendadas: Instala las siguientes extensiones para mejorar la productividad:ESLint: Proporciona soporte para ESLint, una herramienta de análisis de código estático para identificar problemas en el código JavaScript.\nPrettier: Formatea automáticamente el código para que siga un estilo consistente.","herramienta-para-debug#Herramienta para Debug":"Flipper: Permite realizar depuración para aplicaciones móviles, especialmente para dispositivos Android e iOS.","entorno-de-desarrollo-para-react-native#Entorno de desarrollo para React Native":"Es necesario configurar el entorno de desarrollo de React Native para poder compilar y ejecutar la aplicación en dispositivos Android e iOS.","configuración-para-android#Configuración para Android:":"Sigue la guía oficial de React Native para configurar el entorno de desarrollo en Android.\nAsegúrate de tener instalado Android Studio, el SDK de Android y las variables de entorno adecuadas configuradas.","configuración-para-ios#Configuración para iOS:":"Sigue la guía oficial de React Native para configurar el entorno de desarrollo en iOS.\nAsegúrate de tener instalado Xcode y las herramientas de línea de comandos de Xcode.Nota: La configuración detallada puede variar dependiendo de tu sistema operativo y de las versiones de las herramientas utilizadas. Si encuentras algún problema durante la configuración, consulta la documentación oficial de React Native para obtener ayuda."}},"/itg-mobile-framework/implementation/01-Setting_up_environment":{"title":"Descargar el código base desde GitHub","data":{"":"Para comenzar con el desarrollo de la aplicación, necesitarás obtener el código base desde un repositorio en GitHub. A continuación, se detallan los pasos para descargar el código base y crear un nuevo repositorio a partir de él:","accede-al-repositorio-en-github#Accede al repositorio en GitHub":"Dirígete al repositorio que contiene el código base de la aplicación en GitHub. Asegúrate de tener permisos de lectura o acceso al repositorio.\nhttps://github.com/ITGlobers/itg-mobile-framework","selecciona-la-opción-use-this-template#Selecciona la opción \"Use this template\"":"En la página del repositorio, busca y haz clic en el botón \"Use this template\" (Usar esta plantilla). Esta opción te permitirá crear un nuevo repositorio basado en la estructura y archivos del repositorio original.","completa-los-detalles-del-nuevo-repositorio#Completa los detalles del nuevo repositorio":"Después de hacer clic en \"Use this template\", se abrirá una nueva página donde deberás completar los detalles del nuevo repositorio. Esto incluye el nombre del repositorio, la descripción, la visibilidad (público o privado) y otras configuraciones opcionales.","crea-el-nuevo-repositorio#Crea el nuevo repositorio":"Una vez que hayas completado los detalles del nuevo repositorio, haz clic en el botón para crear el repositorio. GitHub creará automáticamente una copia del código base en el nuevo repositorio utilizando la estructura y los archivos del repositorio original.","clona-el-nuevo-repositorio-en-tu-sistema-local#Clona el nuevo repositorio en tu sistema local":"Finalmente, clona el nuevo repositorio en tu sistema local utilizando Git. Esto te permitirá trabajar en el código base de la aplicación directamente desde tu entorno de desarrollo local.\n  git clone <URL_del_nuevo_repositorio>\nIr al directorio del proyecto\n  cd my-project\nInstalar dependencias\n  yarn\nEjecutar la aplicación\n  yarn android\n  yarn ios","inicia-el-desarrollo#Inicia el desarrollo":"¡Listo! Ahora estás listo para comenzar el desarrollo de la aplicación. Abre el código base en tu editor de código y comienza a explorar y modificar según sea necesario para cumplir con los requisitos del proyecto.Siguiendo estos pasos, podrás descargar el código base desde GitHub y comenzar a trabajar en la aplicación. Recuerda mantener el control de versiones utilizando Git y GitHub para realizar un seguimiento de los cambios y colaborar con otros miembros del equipo si es necesario.¡Happy coding! 🚀"}},"/itg-mobile-framework/implementation/02-Configuring_store":{"title":"Estructura del proyecto","data":{"":"El proyecto sigue una estructura típica de una aplicación de React Native, con la adición de una configuración específica en el archivo plugins.config.js ubicado en la raíz del proyecto.","carpeta-src#Carpeta src":"La carpeta src contiene los archivos principales de la aplicación. Aquí se encuentran las siguientes subcarpetas:components: Esta carpeta contiene los componentes propios o personalizados de la tienda (si aplica), como botones, tarjetas, barras de navegación, etc. Si la tienda que se quiere construir no requiere personalización en la lógica de los componentes base o algún componente personalizado, esta carpeta puede estar vacía.styles: Aquí se almacenan los estilos globales y específicos de la aplicación, como hojas de estilo, temas y variables.tests: Esta carpeta contiene los archivos de pruebas automatizadas para asegurar los flujos de compra principales de la aplicación.index.js: Este archivo sirve como punto de entrada principal de la aplicación, donde se realiza la inicialización de React Native y se monta el componente raíz de la aplicación envíandole la información requerida al componente Core del framework.","archivo-pluginsconfigjs#Archivo plugins.config.js":"El archivo plugins.config.js en la raíz del proyecto es responsable de especificar la configuración del CMS (Sistema de Gestión de Contenidos) y la plataforma de comercio electrónico que se utilizarán en la aplicación. Este archivo puede contener la siguiente información:Configuración del CMS: Se pueden incluir detalles como las claves de acceso, la configuración de autenticación, etc.Configuración de la plataforma de ecommerce: Aquí se pueden definir detalles como las claves de autenticación, las configuraciones generales de la cuenta, etc.Integraciones de plugins: Si la aplicación utiliza plugins o extensiones específicas para el CMS o la plataforma de ecommerce, estas configuraciones también pueden incluirse aquí.Ejemplo de plugins.config.js:\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `itg-cms-plugin`,\n      options: {\n        provider: `itg`,\n        account: `itglobers`,\n        workspace: `master`,\n      },\n    },\n    {\n      resolve: `itg-ecommerce-plugin`,\n      options: {\n        provider: `vtex`,\n        account: `itglobers`,\n        workspace: `master`,\n        culture: {\n          country: 'COL',\n          currency: 'COP',\n          customCurrencyDecimalDigits: 0,\n          customCurrencySymbol: '$',\n          language: 'es',\n          locale: 'es-CO',\n        },\n      },\n    },\n  ],\n}\nEsta estructura y el archivo de configuración proporcionan una base sólida para comenzar a desarrollar la aplicación de comercio electrónico en React Native, permitiendo una fácil expansión y personalización según las necesidades del proyecto."}},"/itg-mobile-framework/components/Welcome/WelcomeComponent":{"title":"Welcome Component","data":{"":"El componente WelcomeComponent está diseñado para dar la bienvenida a los usuarios en tu aplicación y ofrecerles opciones para iniciar sesión o registrarse.","configuración#Configuración":"El componente WelcomeComponent puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttitle\tstring\tTexto principal que se muestra como título en el componente\t-\tsubTitle\tstring\tTexto del subtítulo que proporciona información adicional debajo del título\t-\tsignup-button\tButton\tObjeto que incluye las propiedades text y link del botón\t-\tsignin-button\tButton\tObjeto que incluye las propiedades text y link del botón\t-\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","button#Button":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\ttext\tstring\tTexto que se muestra en el botón.\t-\tlink\tstring\tRuta a la que se hace la redirección cuando se presiona el botón\t-","personalización#Personalización":"Para aplicar personalización de estilos al componente DeliveryMethod, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nHoja de Estilos\tmodalContent\twelcomeComponentTextsContainer\twelcomeComponentTitle\twelcomeComponentSubtitle\twelcomeComponentButtonsContainer\twelcomeComponentSignupButton\twelcomeComponentSignupButtonText\twelcomeComponentSigninButton\twelcomeComponentSigninButtonText"}},"/itg-mobile-framework/implementation/03-Defining_styles":{"title":"Estilos globales en la plantilla","data":{"":"Los estilos globales en nuestra plantilla son esenciales para garantizar la coherencia visual en todos los componentes nativos. Estos estilos se definen y aplican para facilitar la personalización y mejorar la eficiencia al realizar cambios que afectan diferentes partes de la aplicación.","ajuste-de-valores-y-pautas-de-diseño#Ajuste de valores y pautas de diseño":"Es crucial ajustar los valores de los estilos globales para cumplir con las pautas de diseño de la aplicación en desarrollo. Por ejemplo, si queremos cambiar el color de fondo base de nuestra aplicación, simplemente modificamos el valor correspondiente dentro del objeto backgroundColor en el archivo de estilos global.\nimport type { GlobalStylesType } from './typeTest'\nconst GlobalStyles: GlobalStylesType = {\n   // Background Colors\n  backgroundColor: {\n    base: '#ffffff',  // Background Colors\n    baseInverted: '#03044e',\n     // Other colors...\n  },","consideraciones-adicionales#Consideraciones adicionales":"Es importante tener en cuenta que los cambios en los estilos globales afectarán a todos los componentes nativos que los utilicen, a menos que se anulen con estilos personalizados. Por lo tanto, comprender cómo se aplican y ajustan estos estilos es esencial para mantener la coherencia visual en toda la aplicación.","ejemplos-de-uso-de-estilos-globales-en-estilos-personalizados#Ejemplos de uso de estilos globales en estilos personalizados":"text: {\n   color: '#000', ...GlobalStyles.typography.heading1;\n}\nSe proporciona una forma de modificar estilos de componentes específicos a través de un hook.Esta implementación no solo agrega flexibilidad al proceso de desarrollo sino que también promueve la reutilización de componentes al permitir que se personalicen según las necesidades específicas de cada proyecto.","organización-y-estructura-de-estilos#Organización y estructura de estilos.":"Para mantener la claridad y organización de estilos en los proyectos, se adopta una estructura específica. Los estilos se crearán en archivos individuales para cada pantalla o vista de la aplicación, como \"home\" o \"auth\". Estos archivos estarán ubicados dentro de la carpeta \"styles\" y tendrán la extensión \".ts\".Cada clase de estilo se nombrará siguiendo una convención simple: el nombre de la vista seguido del nombre del estilo, separados por un guión. Por ejemplo, para los estilos de la vista \"home\", podríamos tener una clase llamada \"home-title\".Los estilos para cada vista se organizarán dentro de un archivo \".ts\", utilizando un objeto para agruparlos. Dentro de este objeto, las claves de nivel superior representarán las clases de estilo para esa vista y cada clase, a su vez, será un objeto que contiene los estilos aplicables a las etiquetas del componente.Para mantener la coherencia, el nombre de la constante que contiene los estilos de una vista será el nombre de la vista seguido de \"Styles\". Por ejemplo, para la vista \"home\", la constante se llamará \"homeStyles\".A continuación se muestra un ejemplo de cómo se estructuran los estilos para la vista \"home\":\nconst homeStyles: Styles = {\n  'home-text-1': { // Class name\n    container: { // Class of the tag to which styles will be applied\n      backgroundColor: 'pink', // CSS Property / Value\n    },\n    text: {\n      color: 'black',\n      fontSize: 20,\n      textAlign: 'center',\n    },\n  },\n  'home-text-2': {\n    container: {\n      backgroundColor: 'black',\n    },\n    text: {\n      color: 'white',\n      fontSize: 20,\n      padding: 5,\n    },\n  },\n}","uso-de-estilos-use-el-hook-customstyles#Uso de estilos (use el hook CustomStyles)":"Para aplicar estilos a un componente, utilizamos el hook useCustomStyles. Este hook toma como argumento el nombre de la clase de estilo que queremos aplicar, la cual debe ser proporcionada vía props.El hook devuelve un objeto StyleSheet que contiene los estilos definidos para esa clase en particular.Usando el ejemplo anterior, supongamos que queremos aplicar los estilos definidos para la clase \"home-text-1\". Podemos hacerlo de la siguiente manera:\nconst styles = useCustomStyles('home-text-1');\nEsto nos proporcionará el objeto que contiene los estilos definidos para la clase \"home-text-1\":\n{\n  container: {\n    backgroundColor: 'pink',\n  },\n  text: {\n    color: 'black',\n    fontSize: 20,\n    textAlign: 'center',\n  }, \n}\nFinalmente, podemos aplicar fácilmente estos estilos a las etiquetas dentro del componente:\n<View style={styles.container}>\n  <Text style={styles.text}>Example</Text>\n</View>","estilos-específicos-para-androidios#Estilos específicos para Android/iOS":"En React Native, los estilos pueden variar según el sistema operativo en el que se ejecuta la aplicación. Para abordar esta variación, proporcionamos una solución flexible para aplicar estilos específicos para Android o iOS a una clase particular.Para lograr esto, en nuestros estilos definimos el nombre de la clase de etiqueta seguido de un punto (.) y el nombre del sistema operativo. Por ejemplo: 'container.ios'.\n{\n  container: {\n    backgroundColor: 'pink',\n    padding: 20\n  },\n  'container.ios': {\n    padding: 15\n  },\n}\nEn este ejemplo, si la aplicación se ejecuta en un dispositivo Android, solo se aplicarán los estilos definidos en 'contenedor'. Sin embargo, si se ejecuta en un dispositivo iOS, se aplicarán los estilos definidos tanto en 'container' como en 'container.ios', pero la última clase tendrá prioridad. Esto significa que si hay una clase repetida, se priorizarán los estilos específicos de la plataforma correspondiente (iOS o Android)."}},"/itg-mobile-framework/implementation/06-Following_good_practices":{"title":"Buenas prácticas para el desarrollo de la aplicación","data":{"":"Desarrollar una aplicación de comercio electrónico requiere seguir una serie de buenas prácticas para garantizar la calidad del código y la eficiencia del proceso de desarrollo. A continuación, se detallan algunas de estas prácticas:","diligenciar-correctamente-la-plantilla-de-información-para-subir-un-pull-request#Diligenciar correctamente la plantilla de información para subir un Pull Request":"Al enviar cambios al repositorio a través de un pull request, es importante proporcionar una descripción detallada de los cambios realizados. Esto incluye una explicación clara del propósito de los cambios, las nuevas características implementadas o los problemas resueltos. Además, asegúrate de seguir las pautas de contribución establecidas por el proyecto.","atender-los-errores-yo-advertencias-de-los-bots-de-github-actions#Atender los errores y/o advertencias de los bots de GitHub Actions":"GitHub Actions está configurado en el proyecto para ejecutar análisis de código estático con ESLint, asegurándote de que tu código cumpla con las convenciones de estilo y las mejores prácticas de codificación. Presta atención a los errores y advertencias que notifican los bots de GitHub Actions y resuélvelos antes de fusionar los cambios en la rama principal.","implementar-pruebas-unitarias-a-los-componentes-personalizados#Implementar pruebas unitarias a los componentes personalizados":"Asegúrate de escribir pruebas unitarias para los componentes personalizados. Usamos bibliotecas de pruebas como Jest y @testing-library/react-native para escribir pruebas que cubran diferentes casos de uso y escenarios. Las pruebas unitarias garantizan el correcto funcionamiento de los componentes y ayudan a prevenir regresiones durante el desarrollo.","manejar-el-registro-de-ccambio-de-versiones-en-el-archivo-changelog#Manejar el registro de Ccambio de versiones en el archivo CHANGELOG":"Mantén un registro detallado de los cambios realizados en la aplicación en el archivo CHANGELOG. Documenta cada versión de la aplicación junto con una lista de cambios, nuevas características, correcciones de errores y cualquier otra información relevante. Esto facilita el seguimiento de la evolución de la aplicación y ayuda a los colaboradores a comprender los cambios introducidos en cada versión.Ejemplo de Archivo CHANGELOG:\n# Cambios Recientes\n## [1.1.0] - 2024-03-28\n### Agregado\n- Nueva funcionalidad de búsqueda avanzada.\n- Componente de filtro de productos personalizado.\n### Corregido\n- Solucionado el problema de carga lenta en la pantalla de inicio.\n## [1.0.1] - 2024-03-15\n### Corregido\n- Corregido el error de renderizado en el carrito de compras.\nAl seguir estas buenas prácticas, podrás mantener un proceso de desarrollo organizado y eficiente, asegurando la calidad y la confiabilidad de la tienda."}},"/itg-mobile-framework/implementation/07-Running_automated_tests":{"title":"Under construction","data":{}},"/itg-mobile-framework/implementation/09-Deploying":{"title":"Under construction","data":{}},"/itg-mobile-framework/implementation/08-Debugging":{"title":"Uso de Flipper para depurar la aplicación","data":{"":"Flipper es una poderosa herramienta de depuración que ofrece una amplia gama de funcionalidades para inspeccionar y depurar aplicaciones móviles. Al utilizar Flipper, los desarrolladores pueden acceder a herramientas como seguimiento de red, inspección de estado de componentes, visión general de eventos, y mucho más. A continuación, se resalta la importancia de utilizar Flipper y cómo empezar a aprovecharlo en el proyecto:","importancia-de-flipper#Importancia de Flipper":"Seguimiento de red: Permite monitorear las solicitudes de red realizadas por la aplicación, lo que facilita la identificación de problemas de rendimiento, errores de conexión y datos incorrectos.Inspección de estado de componentes: Permite visualizar y modificar el estado de los componentes en tiempo real, lo que ayuda a depurar problemas de renderizado, comportamiento inesperado y errores de lógica.Visión general de eventos: Facilita el seguimiento de eventos y acciones realizadas por el usuario, lo que ayuda a comprender el flujo de la aplicación y a identificar posibles áreas de mejora.Herramientas de desarrollo personalizadas: Flipper ofrece la capacidad de crear y utilizar herramientas de desarrollo personalizadas para satisfacer las necesidades específicas del proyecto.","empezar-a-utilizar-flipper#Empezar a utilizar Flipper":"Descargar e Instalar Flipper: Descarga e instala Flipper desde el sitio web oficial. Está disponible para macOS, Windows y Linux.Configurar Flipper con la aplicación: Flipper ya está configurado en el proyecto. Simplemente inicia Flipper y conecta tu dispositivo móvil o emulador a tu computadora.Explorar las Funcionalidades: Una vez conectado, explora las diferentes funcionalidades de Flipper, como Network, Layout Inspector, entre otras, para depurar eficazmente la aplicación.Utilizar herramientas personalizadas: Si es necesario, utiliza herramientas personalizadas o crea nuevas herramientas para abordar problemas específicos o para mejorar el flujo de trabajo del desarrollo.","ejemplo-de-uso#Ejemplo de Uso":"Para realizar un seguimiento de las solicitudes de red y depurar problemas de conexión, utiliza la herramienta Network en Flipper.Para inspeccionar el estado de los componentes y depurar problemas de renderizado, utiliza la herramienta Layout Inspector en Flipper.","consejo#Consejo":"Asegúrate de mantener Flipper actualizado para acceder a las últimas características y mejoras de rendimiento.","nota#Nota":"Flipper puede ofrecer una experiencia de depuración más completa cuando se combina con complementos y extensiones específicos para el entorno de desarrollo y el tipo de proyecto.Al utilizar Flipper para depurar la aplicación, podemos identificar y resolver problemas de manera eficiente, lo que conduce a una mejor experiencia de usuario y un desarrollo más ágil."}},"/itg-mobile-framework/initial-set-up/store-set-up":{"title":"Configuración de tienda","data":{"":"El set-up inicial es el proceso de cargar las interfaces de todos los componentes de tu aplicación, ya sean personalizados o de itg-ecommerce-plugin. Estas interfaces son cargadas al CMS de tu proyecto, y desde él se crearán todas las rutas que tendrá tu aplicación y se definirán los componentes de dichas rutas.En esta sección aprenderás\nCómo está configurado el template de este proyecto\nQué son interfaces de componentes\nCómo crear las interfaces de tus componentes\nCómo hacer un set-up inicial de un proyecto","cómo-está-configurado-el-template-de-este-proyecto#¿Cómo está configurado el template de este proyecto?":"La tienda que visualizas al iniciar el proyecto, es un set-up inicial creado usando los servicios de Headless CMS de VTEX.Headless CMS ofrece la posibilidad de crear interfaces para tus componentes y desde un admin panel te permite llamar y personalizar sos componentes de forma sencilla.","modifica-el-set-up-de-tu-proyecto#Modifica el set-up de tu proyecto":"Puedes modificar el set-up el proyecto de dos formas\nHaz modificaciones desde tu CMS, añadindo o eliminando componentes o rutas. Y para una personalización más detallada, cambia propiedades especificas de tus componentes.\nAñade nuevos componentes a tu CMS.","añadir-nuevos-componentes#Añadir nuevos componentes":"El uso de Headless CMS de VTEX se realiza a traves de un servicio custom, por lo que deberás notificiar al equipo del framework para que añadan el componente que has creado.Para este proceso lo más relevante es que tengas la interfaz de tu componente, que es la que definirá que elementos se pueden personalizar (si los tiene) y que tipo de valores son requeridos para esa personalización.En la sección ¿Qué son interfaces? aprenderás los conceptos más relevantes al momento de crear interfaces para que tus componentes puedan ser usados desde un CMS.\n❗ Este proceso puede sufrir modificaciones dependiendo del servicio de CMS que estés utilizando. La información proporcionada hasta ahora explica el proceso con los servicios de VTEX de FastStore y Headless CMS.","qué-son-interfaces#¿Qué son interfaces?":"Las interfaces son una herramienta que te ayudan a definir la estructura de tus componentes. Piensa en ellas como un plano que describe qué propiedades y configuraciones puede tener un componente. En muchos casos, estas interfaces pueden estar definidas en formatos como JSON u otros formatos específicos según el sistema de gestión de contenidos (CMS) que estés utilizando.Esta herramienta facilita el manejo de tu aplicación, pues puedes reconocer qué datos necesita cada componente y cómo puedes personalizarlo. Otra de sus ventajas es que te permite reutilizar tus componentes en diferentes partes de tu aplicación.","cómo-implementar-las-interfaces-para-tus-componentes#¿Cómo implementar las interfaces para tus componentes?":"La sintaxis al momento de escribir tus interfaces puede variar según el servicio o tecnología que estés usando, aún así la base para entender como funcionan suele ser muy similar. Esto se debe a que se basan en estructuras de datos fundamentales como:\nstring (para texto)\nnumber (para valores numéricos)\nboolean (para valores verdadero/falso)\narray (para listas de elementos)\nobject (para estructuras más complejas)\nUna de sus ventajas es la composición, que permite combinar estructuras básicas y anidarlas para crear interfaces más complejas.En la sección CMS vimos un componente welcome-component que es el punto de entrada para una aplicación.Por ejemplo, Al solicitar la información de esta ruta recibimos la estructura de dos componentes:\n{\n  \"id\": \"2056577609539\",\n  \"name\": \"image-background\",\n  \"data\": {\n    \"image\": \"https://itglobers/arquivos/AppsBannerHombreWelcome.jpg\"\n  }\n},\n{\n  \"id\": \"371237053833\",\n  \"name\": \"welcome-component\",\n  \"data\": {\n    \"signup-button\": {\n      \"text\": \"Registrate\",\n      \"link\": \"Login\"\n    },\n    \"signin-button\": {\n      \"text\": \"Iniciar ahora\",\n      \"link\": \"Login\"\n    },\n    \"title\": \"Creamos la mejor app para ti con ITG\",\n    \"subtitle\": \"Únete ahora para crecer tu negocio\"\n  }\n}\nEstos componentes responden con esas estructuras de datos, porque al configurarse para usar en CMS se declaro su interfaz de datos de la siguiente manera (para welcome-component)\n{\n  \"name\": \"welcome-component\",\n  \"schema\": {\n    \"title\": \"Welcome Component\",\n    \"type\": \"object\",\n    \"properties\": {\n      \"title\": {\n        \"type\": \"string\",\n        \"title\": \"Title\",\n        \"description\": \"Title to be displayed in the component.\"\n      },\n      \"subtitle\": {\n        \"type\": \"string\",\n        \"title\": \"Subtitle\",\n        \"description\": \"Subtitle to be displayed in the component.\"\n      },\n      \"signup-button\": {\n        \"type\": \"object\",\n        \"title\": \"Signup button\",\n        \"properties\": {\n          \"text\": {\n            \"type\": \"string\",\n            \"title\": \"Text\",\n            \"description\": \"Text to be displayed in the button.\"\n          },\n          \"link\": {\n            \"type\": \"string\",\n            \"title\": \"Link\",\n            \"description\": \"URL to be redirected when the button is clicked.\"\n          }\n        }\n      },\n      \"signin-button\": {\n        \"type\": \"object\",\n        \"title\": \"Signin button\",\n        \"properties\": {\n          \"text\": {\n            \"type\": \"string\",\n            \"title\": \"Text\",\n            \"description\": \"Text to be displayed in the button.\"\n          },\n          \"link\": {\n            \"type\": \"string\",\n            \"title\": \"Link\",\n            \"description\": \"URL to be redirected when the button is clicked.\"\n          }\n        }\n      }\n    }\n  }\n}\nAl revisar cada sección de esta interfaz notarás que define un título principal y un subtítulo, ambos como texto simple. Luego tienes dos botones: uno para registrarse y otro para iniciar sesión. Cada botón se configura con su propio texto y un enlace al que dirigirá cuando se haga clic.Cuando escribas un componente, deberás acompañarlo de la interfaz que pueda ser manejado y personalizado desde un CMS. El proceso de creación de una interfaz te resultará familiar, pues se asemeja a la creación de tipos con TypeScript, incluso los tipos de tus componentes pueden ser la base al momento de escribir tus interfaces.","componentes-sin-interfaz#Componentes sin interfaz":"No todos los componentes necesitarán una interfaz para funcionar, solo tendrás que llamar a tu componente sin que este tenga ninguna propiedad. Es posible que encuentres casos así cuando tu componente haga parte de algún contexto que ofrece toda los datos que requiere el componente para funcionar.","crear-un-set-up-inicial#Crear un set-up Inicial":"Si estás encargado de crear un set-up inicial o template usando un nuevo servicio CMS, deberás realizar los siguientes pasos:\nCrea la interfaces de tus componentes personalizados.\nDesde el panel de tu CMS, crea las rutas de tu aplicación. Al interior de cada ruta, añade los componentes necesarios según los requitisitos de tu aplicación.\nNo tendrás que preocuparte por las interfaces de los componentes\nitg-ecommerce-plugin, ya que están a cargo del equipo del Framework."}},"/itg-mobile-framework/release-notes/2024/Go_live":{"title":"Under construction","data":{}},"/itg-mobile-framework/introduction":{"title":"Under construction","data":{}},"/itg-mobile-framework/component_development/render_your_components":{"title":"Registro de componentes personalizados","data":{"":"Una vez has creado tus componentes, deberás registrarlos para visualizarlos en tu aplicación. Esta sección te enseñará a registrar tus componentes y algunos puntos que deberás tener en cuenta al momento de hacerlo.","archivo-de-registro-componentes#Archivo de registro componentes":"Los componentes personalizados que quieras agregar a tu proyecto, se registran de forma sencilla en el archivo index.tsx en la ruta /src/components\nEste archivo, exporta un objeto llamado customComponents que actúa como el registro de componentes. En este objeto, cada llave representa el nombre del componente y su valor será la función que renderiza el componente.","ejemplo-de-registro#Ejemplo de registro":"Tu plantilla proyecto ya incluye un componente registrado. El componente RichText es importado desde la ruta /src/components/RichText y es añadido al objeto de registro customComponents.\n// Ejemplo de registro del componente \"rich-text\"\nimport RichText from './RichText'\ntype AllowedComponents = Record<string, any>\nexport const customComponents: AllowedComponents = {\n  // ...otros componentes registrados\n  'rich-text': RichText,\n  // ...otros componentes registrados\n}","consideraciones-para-el-registro-de-componentes#Consideraciones para el registro de componentes":"Como ves, el registrar un componente personalizado es un proceso sencillo. Aún así ten en cuenta las siguientes consideraciones","configura-tu-componente-desde-tu-cms#Configura tu componente desde tu CMS":"Tú componente está listo para usar, pero debes agregarlo a tu CMS para que puedas visualizarlo. Recuerda que tu CMS es quien generá la estructura de tu aplicación, sus rutas y componentes para esas rutas.\nAunque tu componente esté registrado, si no lo llamas en alguna de tus rutas, no lo visualizarás.Si ya agregaste tu componente a una ruta y no lo visualizas, revisa alguno de los siguientes puntos:\nEl nombre de tu componente debe ser exactamente igual tanto en el archivo de registro de componentes como en tu CMS. Por ejemplo si en tu CMS quieres llamar al componente RichText no se renderizará si en tu proyecto lo registraste como rich-text\nVerifica que las propiedades que envias desde tu CMS son las que tu componente necesita. Si tu componente Slider necesita de un arreglo de urls, y en su lugar tu CMS envía otro tipo de dato tu componente puede no renderizarse o puede causar errores en tu aplicación.","nombramiento-de-tus-componentes-custom#Nombramiento de tus componentes custom":"Al registrar tus componentes, es posible que uses un nombre que ya ha sido usado por algún componente de itg-ecommerce-plugin. Cuando dos componentes tienen el mismo nombre, tendrá prioridad tu componente personalizado sobre los componentes de itg-ecommerce-plugin.Por ejemplo, tu proyecto por defecto tiene un componente registrado llamado 'rich-text', este componente existe en e-commerce y está registrado bajo el mismo nombre. Pero al ser llamados desde el CMS, se el componente de tu proyecto.\nPuedes cambiar estilos de tu componente 'rich-text' y visualizarlos en\ntu aplicación. Si el componente no está en la estructura de tu aplicación,\npuedes añadirlo desde tu CMS.\nAlgunas consideraciones al momento de nombrar tus componentes:\nSi usas un nombre ya existente se usará en lugar de los componentes de itg-ecommerce-plugin. Esto incluye todas las secciones de la app que están usando ese componente. Así que, si quieres cambiar o añadir un componente en solo una sección y mantener en otras secciones el uso del componente de e-commerce, registra tu componente bajo un nombre distinto."}},"/itg-mobile-framework/components/ShippingData/PickupMethod":{"title":"PickupMethod","data":{"":"El componente PickupMethod permite seleccionar la tienda donde se recogeran los productos de una compra. Para ver el listado de tiendas disponibles se debe seleccionar el departamento y la ciudad deseada.","configuration#Configuration":"El componente PickupMethod puede ser configurado con las siguientes propiedades:","propiedades#Propiedades":"Nombre de la propiedad\tTipo\tDescripción\tValor por defecto\tpickupTitle\tstring\tTitulo de la vista principal del componente\tSelecciona la tienda para entrega\tdropdownLevels\tstring[]\tDefine la lista de niveles de la division politico administrativa de cada pais\t['Departamento', 'Ciudad', 'Tienda']\ticonOpenName\tstring\tNombre del icono que se muestra cuando está desplegada la lista\tarrowUp\ticonCloseName\tstring\tNombre del icono que se muestra cuando está contraida la lista\tarrowDownCategory\tclassName\tstring\tNombre de clase CSS para aplicar estilos personalizados al componente\t-","especificaciones#Especificaciones":"Aqui se muestra un fragmento del módulo da datos que guarda la división politico administrativa de Bolivia, con sus respectivos códigos de área para cada ubicación:\nexport const countryData = {\n  //...\n  Beni: {\n    Cercado: {\n      Paititi: \"10000\",\n      Trinidad: \"10001\"\n    },\n    Mamore: {\n      'San Ramon': \"10200\"\n    },\n    Moxos: {\n      'San Ignacio de Moxos': \"10300\",\n      'San Joaquin': \"10301\"\n    }\n  },\n  'La Paz': {\n    Aroma: {\n      'Ayo Ayo': \"40000\",\n      Capaja: \"40001\"\n    },\n    Camacho: {\n      Escoma: \"40100\",\n      Mocomoco: \"40101\",\n      'Puerto Acosta': \"40102\"\n    },\n    Caranavi: {\n      Caranavi: \"40200\",\n      Taipiplaya: \"40201\"\n    }\n  }\n  //...\n}\nEjemplo de la propiedad dropdownLevels para este caso:\nconst dropdownLevels = ['Departamento', 'Municipio', 'Localidad', 'Tienda']\nEl objeto countryData para cada pais será agregado por el equipo de soporte del framework, de acuerdo a las necesidades de cada proyecto.","personalización#Personalización":"Para aplicar personalización de estilos al componente PickupMethod, sigue las instrucciones proporcionadas en la guía sobre Estiliza tus componentes, utilizando el siguiente listado de clases:\nStyleSheet\tpickupMethodContainer\tpickupMethodTitle\tpickupMethodButton\tpickupMethodButtonText\tpickupMethodLoadingSubmit\tpickupMethodDropdownContainer\tpickupMethodDropdownActiveContainer\tpickupMethodDropdownLabel\tpickupMethodDropdownActiveLabel\tpickupMethodDropdownOpenIcon\tpickupMethodDropdownCloseIcon\tpickupMethodDropdownActiveIcon\tpickupMethodLoading\tpickupMethodDropdownOptionsContainer\tpickupMethodDropdownOptionLabel"}},"/itg-mobile-framework/implementation/04-Customizing_components":{"title":"Registro de componentes personalizados","data":{"":"En este proyecto, se ofrece la posibilidad para los desarrolladores de registrar componentes personalizados directamente desde la plantilla. Esto se realiza a través del archivo \"index.tsx\" ubicado en la ruta /src/components.","estructura-del-registro-de-componentes#Estructura del registro de componentes":"Dentro de la carpeta /src/components, el archivo \"index.tsx\" exporta un objeto que actúa como el registro de componentes. En este objeto, cada clave representa el nombre del componente y el valor asociado es el propio componente.","ejemplo-de-registro#Ejemplo de registro":"Para ilustrar la implementación, se proporciona una estructura básica de un componente llamado \"rich-text\". Puedes encontrar el código de ejemplo en la ruta /src/components/RichText, y este componente está registrado en el archivo \"index.tsx\" dentro de la carpeta \"components\".\n// Ejemplo de registro del componente \"rich-text\"\nimport RichText from './RichText'\ntype AllowedComponents = Record<string, any>\nexport const customComponents: AllowedComponents = {\n  // ...otros componentes registrados\n  'rich-text': RichText,\n  // ...otros componentes registrados\n}"}},"/itg-mobile-framework/implementation/05-Maintaining_component_architecture":{"title":"Arquitectura de componentes","data":{"":"Es importante seguir buenas prácticas y mantener la mantenibilidad al desarrollar componentes personalizados en una aplicación. La arquitectura que adoptamos separa la capa de lógica de la capa de presentación. A continuación, se muestra un ejemplo de un componente de texto que sigue esta arquitectura:","componente-de-texto#Componente de texto":"El componente de texto consta de tres partes principales: el contenedor (RichTextContainer), la representación visual (RichText) y la capa de lógica (useRichText). Veamos cada uno de ellos:","richtextcontainer#RichTextContainer":"El contenedor (RichTextContainer) es responsable de unificar la capa de lógica con la capa de presentación. Se encarga de inicializar y compartir los datos necesarios al componente de presentación (RichText). Aquí está el código:\nimport React from 'react'\nimport { RichText } from './RichText'\nimport { useRichText } from './useRichText'\ninterface Props {\n  text: string\n}\nconst RichTextContainer = ({ text }: Props) => {\n  const richTextProps = useRichText()\n  return <RichText {...richTextProps} text={text} />\n}\nexport default RichTextContainer\nEn este componente, se utiliza un hook personalizado (useRichText) para obtener las propiedades y desarrollar cualquier tipo de lógica necesaria para el componente y luego se pasa al componente de presentación (RichText).","richtext#RichText":"El componente de presentación (RichText) se encarga únicamente de mostrar la información. No tiene lógica de negocio y se centra únicamente en la representación visual. Aquí está el código:\nimport React from 'react'\nimport { Text } from 'react-native'\ninterface Props {\n  text: string\n}\nexport const RichText = ({ text }: Props) => {\n  return <Text testID=\"priority-custom-component\">{text}</Text>\n}\nEste componente recibe los datos del contenedor y los renderiza visualmente utilizando un componente Text de React Native.Siguiendo esta arquitectura, mantenemos la separación de responsabilidades entre la lógica de negocio y la presentación, lo que facilita la mantenibilidad y la escalabilidad de la aplicación.Este enfoque de separación de lógica puede aplicarse a otros componentes de la aplicación, lo que ayuda a mantener un código limpio y modular."}},"/itg-mobile-framework/set-up/Enviroment_setup":{"title":"Configuración de ambiente","data":{"":"Para realizar la configuración de tu ambiente, necesitarás el código base desde un repositorio de GitHub. A continuación, se detallan los pasos para descargar el código base y crear un nuevo repositorio a partir de él:","accede-al-repositorio-de-github#Accede al repositorio de GitHub":"Dirígete al repositorio que contiene el código base de la aplicación en GitHub. Asegúrate de tener permisos de lectura o acceso al repositorio. https://github.com/ITGlobers/itg-mobile-framework","crea-un-nuevo-proyecto-con-use-this-template#Crea un nuevo proyecto con “Use this template”":"En la pagina del repositorio está disponible la opción Use this template.Esta opción te permitirá crear un nuevo repositorio basado en la estructura y archivos del repositorio original. Para empezar haz click en el botón use this template.","configura-el-nuevo-proyecto#Configura el nuevo proyecto":"Al hacer click en use this template, se abrirá una nueva página donde deberás completar los detalles del nuevo repositorio. Esto incluye el nombre del repositorio, la descripción, la visibilidad (público o privado) y otras configuraciones opcionales.Una vez que hayas completado los detalles del nuevo repositorio, haz clic en el botón para crear el repositorio. GitHub creará automáticamente una copia del código base en el nuevo repositorio utilizando la estructura y los archivos del repositorio original.","clona-tu-nuevo-repositorio-en-tu-sistema-local#Clona tu nuevo repositorio en tu sistema local":"Finalmente, clona el nuevo repositorio en tu sistema local utilizando Git. Esto te permitirá trabajar en el código base de la aplicación directamente desde tu entorno de desarrollo local.\ngit clone <URL_del_nuevo_repositorio>\nIr al directorio del proyecto\ncd my-project\nInstalar dependencias\nyarn\nEjecutar la aplicación\nyarn android\nyarn ios\nSiguiendo estos pasos, podrás descargar el código base desde GitHub y comenzar a trabajar en la aplicación. Recuerda mantener el control de versiones utilizando Git y GitHub para realizar un seguimiento de los cambios y colaborar con otros miembros del equipo si es necesario.","próximos-pasos#Próximos pasos":"¡En este punto ya tienes tu ambiente listo para comenzar a desarrollar!Si este es tu primer proyecto, te recomendamos continues con ¿Qué incluye el proyecto? para conocer como está estructurado el template que descargasteSi ya conoces el template, puedes continuar con ¿Cómo configurar el proyecto?"}},"/itg-mobile-framework/set-up/Project_structure":{"title":"¿Qué incluye el proyecto (template) y cómo configurarlo?","data":{"":"El proyecto sigue una estructura típica de una aplicación de React Native, con la adición de una configuración específica en el archivo plugins.config.js ubicado en la raíz del proyecto.","carpeta-src#Carpeta src":"La carpeta src contiene los archivos principales de la aplicación. Aquí se encuentran las siguientes subcarpetas:","components#components":"Esta carpeta contiene los componentes propios o personalizados de la tienda (si aplica), como botones, tarjetas, barras de navegación, etc. Si la tienda que se quiere construir no requiere personalización en la lógica de los componentes base o algún componente personalizado, esta carpeta puede estar vacía.","styles#styles":"Aquí se almacenan los estilos globales y específicos de la aplicación, como hojas de estilo, temas y variables.Para más detalles revisa nuestra guía de aplicación de estilos.","tests#tests":"Esta carpeta contiene los archivos de pruebas automatizadas para asegurar los flujos principales de la aplicación.Para más detalles sobre tests automatizados revisar test automatizados.","pluginsconfigjs#plugins.config.js":"El archivo plugins.config.js, que puedes encontrar en la raíz del proyecto, es responsable de especificar la configuración del CMS (Sistema de Gestión de Contenidos) y la plataforma de comercio electrónico que se utilizarán en la aplicación.","configuración-cms#Configuración CMS":"Se pueden incluir detalles como las claves de acceso, la configuración de autenticación, etc.","configuración-de-la-plataforma-ecommerce#Configuración de la plataforma ecommerce":"Aquí se pueden definir detalles como las claves de autenticación, las configuraciones generales de la cuenta, tipo de moneda a usar, entre otros.","integraciones-de-plugins#Integraciones de plugins":"Si la aplicación utiliza plugins o extensiones específicas para el CMS o la plataforma de ecommerce, estas configuraciones también pueden incluirse aquí.Ejemplo de plugins.config.js:\nmodule.exports = {\n  plugins: [\n    {\n      resolve: `itg-cms-plugin`,\n      options: {\n        provider: `itg`,\n        account: `itglobers`,\n        workspace: `master`,\n      },\n    },\n    {\n      resolve: `itg-ecommerce-plugin`,\n      options: {\n        provider: `vtex`,\n        account: `itglobers`,\n        workspace: `master`,\n        culture: {\n          country: 'COL',\n          currency: 'COP',\n          customCurrencyDecimalDigits: 0,\n          customCurrencySymbol: '$',\n          language: 'es',\n          locale: 'es-CO',\n        },\n      },\n    },\n  ],\n}\nEsta estructura y el archivo de configuración proporcionan una base sólida para comenzar a desarrollar la aplicación de comercio electrónico en React Native, permitiendo una fácil expansión y personalización según las necesidades del proyecto.Para entender mejor esta configuración y como es usada revisa las secciones itg-ecommerce-plugin y itg-cms-plugin.","archivo-indextsx#Archivo index.tsx":"Por último, encontrarás este archivo que sirve como punto de entrada principal de la aplicación, donde se realiza la inicialización de React Native y se monta el componente raíz de la aplicación.Este componente viene de la librería CORE y recibe como propiedades:\nHojas de estilos globales y estilos custom, desde la carpeta styles\nListado de plugins a utilizar desde el archivo plugins.config.js\nArreglo de Plugins que se usarán a nivel global.\nObjeto con plugins para rutas especificas.\nComponentes custom, en caso de tenerlos, desde la carpeta components.","inicialización-de-tu-aplicación#Inicialización de tu aplicación":"Antes de inicializar tu proyecto, tu archivo index.tsx debería verse así:\nimport React from 'react'\nimport Core from 'itg-core'\nimport analytics from '@react-native-firebase/analytics'\nimport { components as ecommerceComponents } from 'itg-ecommerce-plugin'\nimport { customComponents as components } from './components'\nimport { GlobalStyles } from './styles/config/styles'\nimport { Styles } from './styles'\nimport { plugins } from '../plugins.config'\nimport routePlugins from './plugins/RoutePlugins'\nimport globalPlugins from './plugins/GlobalPlugins'\nconst App = () => {\n  analytics().setAnalyticsCollectionEnabled(true)\n  return (\n    <Core\n      globalPlugins={globalPlugins}\n      routePlugins={routePlugins}\n      components={{ ...components, ...ecommerceComponents }}\n      data={{ GlobalStyles, Styles }}\n      plugins={plugins}\n    />\n  )\n}"}},"/itg-mobile-framework/set-up/Previous_requirements":{"title":"Requisitos previos","data":{"":"Antes de comenzar a desarrollar aplicaciones de comercio electrónico con ITG Mobile Framework y React Native, asegúrate de tener instalados los siguientes requisitos previos:","nodejs-y-yarn#Node.js y yarn":"Node.js es un entorno de ejecución para JavaScript construido sobre el motor V8 de Chrome.Yarn es un administrador de paquetes de Node.js que facilita la instalación y gestión de paquetes de JavaScript.\nVersión recomendada: Descarga e instala las versiones estables, suelen estar acompañadas de las siglas LTS.\nDescarga e instala Node.js y yarn desde el sitio web oficial.","editor-de-código#Editor de código":"Es esencial contar con un editor de código adecuado para desarrollar aplicaciones de React Native.","visual-studio-code#Visual Studio Code":"Visual Studio Code es un editor de código popular y ampliamente utilizado por la comunidad de desarrollo.\nVersión recomendada: Descarga e instala las versiones estables, suelen estar acompañadas de las siglas LTS.\nExtensiones Visual Studio Code:\nLas siguientes extensiones son de uso obligatorio.\nInstala las siguientes extensiones para mejorar la experiencia de desarrollo:ESLint: Proporciona soporte para ESLint, una herramienta de análisis de código estático para identificar problemas en el código JavaScript.Prettier: Formatea automáticamente el código para que siga un estilo consistente.","herramienta-para-debug#Herramienta para Debug":"Flipper: Permite realizar depuración para aplicaciones móviles, especialmente para dispositivos Android e iOS.reactotron: Permite realizar depuración para aplicaciones móviles, especialmente para dispositivos Android e iOS.","entorno-de-desarrollo-para-react-native#Entorno de desarrollo para React Native":"Es necesario configurar el entorno de desarrollo de React Native para poder compilar y ejecutar la aplicación en dispositivos Android e iOS.","configuración-para-android#Configuración para Android":"Sigue la guía oficial de React Native para configurar el entorno de desarrollo en Android. Asegúrate de tener instalado Android Studio, el SDK de Android y las variables de entorno adecuadas configuradas.","configuración-para-ios#Configuración para iOS":"Sigue la guía oficial de React Native para configurar el entorno de desarrollo en iOS. Asegúrate de tener instalado Xcode y las herramientas de línea de comandos de Xcode.Nota: La configuración detallada puede variar dependiendo de tu sistema operativo y de las versiones de las herramientas utilizadas. Si encuentras algún problema durante la configuración, consulta la documentación oficial de React Native para obtener ayuda."}},"/itg-mobile-framework/plugins/plugin_development":{"title":"Guía para Desarrollar un Plugin","data":{"introducción#Introducción":"Un plugin es una extensión modular que añade funcionalidades específicas a una aplicación sin alterar el núcleo de la misma. Los plugins permiten que las aplicaciones sean más flexibles y escalables, facilitando la incorporación de características adicionales según sea necesario.Para desarrollar un plugin, es fundamental contar con conocimientos previos en varias áreas clave de React. Estos incluyen:\nReducers: Para gestionar el estado de tu aplicación de manera predecible.\nContextos: Para compartir datos y funciones entre componentes sin prop drilling.\nComponentes: Para construir la interfaz de usuario y encapsular la lógica de presentación.\nHooks: Para reutilizar lógica de estado y efectos en tus componentes funcionales.\nSi no tienes experiencia en estas áreas, te recomendamos que primero adquieras conocimientos básicos en estos conceptos y luego regreses a esta guía. Aquí hay algunos recursos que pueden ayudarte:\nReducers\nContextos\nComponentes\nHooks\n💡 En el repositorio de tu proyecto encontrarás una plantilla de plugin lista para usar y personalizar. Esta documentación te guiará sobre cómo estructurar y desarrollar un plugin para el framework, utilizando una estructura de ejemplo que incluye Componentes, Contextos, y Hooks.\nLa estructura del plugin presentada a continuación es solo un ejemplo y está diseñada para ser flexible. Puedes adaptarla según los requisitos específicos de tu plugin. Si necesitas funcionalidades adicionales, puedes agregar nuevas secciones; si encuentras que algunas no son necesarias, puedes eliminarlas. La intención es proporcionarte una base sólida que puedes personalizar para satisfacer tus necesidades.A continuación, se detallan los pasos para crear un plugin y cómo estructurarlo en tu proyecto:","estructura-del-template#Estructura del Template":"","componentes#Componentes":"Los Componentes son elementos de la interfaz de usuario que se utilizan en la aplicación. En esta sección, puedes definir todos los componentes necesarios para tu plugin.En el template, se proporciona la estructura sugerida para la creación y organización de los componentes. Si deseas conocer más de esta arquitectura, revisa Cómo desarrollar tus componentes","exportar-componentes#Exportar componentes":"La estructura del archivo index.ts en el directorio components facilita la exportación de todos los componentes disponibles de manera centralizada.\n// src/components/index.ts\nimport ExampleComponent from './ExampleComponent'\nexport const components = {\n  'example-component': ExampleComponent,\n  // Agrega aquí otros componentes de la misma manera\n}","contextos#Contextos":"Los Contextos permiten compartir estados y funciones entre componentes sin necesidad de prop drilling. En esta sección, defines los contextos necesarios para tu plugin.","exportar-contextos#Exportar contextos":"En el archivo index.ts del directorio contexts, se exportan todos los contextos disponibles en tu plugin.\n// src/contexts/index.ts\nimport { ConfigProvider, useConfig, useConfigDispatch } from './Config'\nexport const contexts = {\n  Config: {\n    provider: ConfigProvider,\n    use: useConfig,\n    dispatch: useConfigDispatch,\n  },\n  // Agrega aquí los demás contextos siguiendo esta estructura:\n  // Ejemplo:\n  // User: {\n  //   provider: UserProvider,\n  //   use: useUser,\n  //   dispatch: useUserDispatch,\n  // },\n}","hooks#Hooks":"Los Hooks personalizados permiten encapsular lógica que puede ser reutilizada en varios componentes. En esta sección, defines los hooks necesarios para tu plugin.","exportar-hooks#Exportar hooks":"En el archivo index.ts del directorio hooks, se exportan todos los hooks personalizados disponibles en tu plugin.\n// src/hooks/index.ts\nimport { useExampleHook } from './ExampleHook'\nexport const hooks = {\n  useExampleHook,\n  // Agrega aquí otros hooks personalizados de la misma manera\n}","archivo-indexts-del-plugin#Archivo index.ts del Plugin":"El archivo index.ts en el directorio raíz del plugin es el punto central desde donde se exportan todos los elementos clave del plugin. Aquí se organizan y exponen componentes, contextos, hooks, y cualquier otro recurso que el plugin pueda necesitar. Esta estructura permite que los consumidores del plugin accedan a todos los recursos necesarios de manera centralizada y ordenada.","estructura-del-indexts#Estructura del index.ts":"// src/index.ts\nimport { components } from './components'\nimport { contexts } from './contexts'\nimport { hooks } from './hooks'\nexport const examplePluginComponents = components\nexport const examplePluginContexts = contexts\nexport const examplePluginHooks = hooks\n// Aquí puedes agregar más elementos que el plugin necesite exportar, como:\n// - Servicios (por ejemplo, API client services)\n// - Utilidades (por ejemplo, funciones helper)\n// - Tipos y constantes\n// Ejemplo:\n// export { services } from './services';\n// export { types } from './types';\n// export const examplePluginServices = services;\n// export const examplePluginTypes = types;\nEs recomendable seguir la nomenclatura: examplePluginServices, examplePluginUtils, etc.\ncon el nombre de su plugin, para mantener consistencia en el nombre de las exportaciones.Recuerda que puedes eliminar cualquier exportación de la plantilla que no sea necesaria para el plugin específico que estás desarrollando.","consideraciones-generales#Consideraciones Generales":"","documentación-interna#Documentación Interna":"Es crucial que cada componente, contexto y hook incluya documentación. Esto ayuda a la comprensión y uso por parte de otros desarrolladores. Considere agregar cualquier detalle relevante que ayude a entender la implementación.\nSe ha proporcionado un archivo README de ejemplo para documentar los componentes, el cual puedes usar como plantilla para mantener una documentación consistente.","pruebas#Pruebas":"Es crucial escribir pruebas para cada componente, contexto y hook del plugin. Las pruebas aseguran que tu código funcione correctamente y facilitan la identificación de errores. Puedes utilizar bibliotecas como Jest y React Testing Library para este propósito.","estilos-y-convenciones-de-código#Estilos y Convenciones de Código":"Sigue las convenciones de código establecidas en tu proyecto para asegurar que el plugin sea consistente con el resto del código base. Esto incluye el formato del código, nombres de variables, y estructuras de archivos.","dependencias#Dependencias":"Asegúrate de listar todas las dependencias necesarias para el plugin, en caso de que existan, en el archivo package.json. Esto incluye cualquier biblioteca externa que el plugin requiera para su funcionamiento."}}}